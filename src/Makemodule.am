################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Read the zproject/README.md for information about making permanent changes. #
################################################################################
program_libs = src/libfty_rest.la ${project_libs}

# Programs need to link the c++ runtime if everything was compiled statically.
if !ENABLE_SHARED
program_libs += -lstdc++ -lm
endif

lib_LTLIBRARIES += src/libfty_rest.la
pkgconfig_DATA = src/libfty_rest.pc

include_HEADERS = \
    include/fty-rest.h \
    include/app.h \
    include/bios_agent.h \
    include/bios_agent++.h \
    include/bios_export.h \
    include/ymsg.h \
    include/bios-magic.h \
    include/cleanup.h \
    include/dbtypes.h \
    include/defs.h \
    include/filesystem.h \
    include/preproc.h.h \
    include/fty_rest_library.h

if ENABLE_DRAFTS
include_HEADERS += \
    include/db/topology2.h \
    include/git_details_override.h \
    include/shared/asset_types.h \
    include/shared/augtool.h \
    include/shared/cidr.h \
    include/shared/configure_inform.h \
    include/shared/csv.h \
    include/shared/data.h \
    include/shared/dbpath.h \
    include/shared/filesystem.h \
    include/shared/fty_asset_uptime_configurator.h \
    include/shared/ic.h \
    include/shared/log.h \
    include/shared/data.h \
    include/shared/str_defs.h \
    include/shared/subprocess.h \
    include/shared/tntmlm.h \
    include/shared/topic_cache.h \
    include/shared/upsstatus.h \
    include/shared/utils.h \
    include/shared/utils++.h \
    include/shared/utils_web.h \
    include/web/src/asset_computed_impl.h \
    include/web/src/helpers.h \
    include/web/src/iface.h \
    include/web/src/location_helpers.h \
    include/web/src/sasl.h \
    include/web/src/tokens.h

endif
src_libfty_rest_la_SOURCES = \
    src/db/agentstate/agentstate.cc \
    src/db/asset_general.cc \
    src/db/assets/assetcr.cc \
    src/db/assets/assetd.cc \
    src/db/assets/assetr.cc \
    src/db/assets/assetu.cc \
    src/db/inout/exportcsv.cc \
    src/db/inout/importcsv.cc \
    src/msg/asset_msg.cc \
    src/msg/common_msg.cc \
    src/persist/assetcrud.cc \
    src/persist/assettopology.cc \
    src/persist/dbhelpers.cc \
    src/persist/monitor.cc \
    src/persist/persist_error.cc \
    src/shared/magic.cc \
    src/warranty/warranty-metric.cc \
    src/add_gpio.cc \
    src/admin_iface.cc \
    src/admin_ifaces.cc \
    src/admin_sse.cc \
    src/alert_ack.cc \
    src/alert_list.cc \
    src/alert_rules_detail.cc \
    src/alert_rules.cc \
    src/alert_rules_list.cc \
    src/asset_DELETE.cc \
    src/asset_export.cc \
    src/asset_GET.cc \
    src/asset_import.cc \
    src/asset_list.cc \
    src/asset_POST.cc \
    src/asset_PUT.cc \
    src/assets_in.cc \
    src/auth.cc \
    src/auth-verify.cc \
    src/average.cc \
    src/config.cc \
    src/conf_scan.cc \
    src/current.cc \
    src/datacenter_indicators.cc \
    src/email_feedback.cc \
    src/email_test.cc \
    src/email_vote.cc \
    src/getlog_GET.cc \
    src/gpo_action.cc \
    src/info.cc \
    src/input_power_chain.cc \
    src/json.cc \
    src/license.cc \
    src/license_POST.cc \
    src/license_status.cc \
    src/license_text.cc \
    src/list_gpio.cc \
    src/my_profile.cc \
    src/netcfg.cc \
    src/not_found.cc \
    src/rack_total.cc \
    src/scan_progress.cc \
    src/scan_run.cc \
    src/security_headers.cc \
    src/server_status.cc \
    src/ssl-redirect.cc \
    src/sysinfo.cc \
    src/systemctl.cc \
    src/time.cc \
    src/uptime.cc \
    src/topology_location_from2.cc \
    src/topology_location_from.cc \
    src/topology_location_to.cc \
    src/topology_power.cc \
    src/admin_passwd.cc \
    src/platform.h

if ENABLE_DRAFTS
src_libfty_rest_la_SOURCES += \
    src/db/topology2.cc \
    src/git_details_override.cc \
    src/shared/asset_types.cc \
    src/shared/augtool.cc \
    src/shared/cidr.cc \
    src/shared/configure_inform.cc \
    src/shared/csv.cc \
    src/shared/data.cc \
    src/shared/dbpath.cc \
    src/shared/filesystem.cc \
    src/shared/fty_asset_uptime_configurator.cc \
    src/shared/ic.cc \
    src/shared/log.cc \
    src/shared/data.cc \
    src/shared/str_defs.cc \
    src/shared/subprocess.cc \
    src/shared/tntmlm.cc \
    src/shared/topic_cache.cc \
    src/shared/upsstatus.cc \
    src/shared/utils.cc \
    src/shared/utils++.cc \
    src/shared/utils_web.cc \
    src/web/src/asset_computed_impl.cc \
    src/web/src/helpers.cc \
    src/web/src/iface.cc \
    src/web/src/location_helpers.cc \
    src/web/src/sasl.cc \
    src/web/src/tokens.cc

endif

if ENABLE_DRAFTS
src_libfty_rest_la_SOURCES += \
    src/fty_rest_private_selftest.cc
endif

src_libfty_rest_la_CPPFLAGS = ${AM_CPPFLAGS}
src_libfty_rest_la_CXXFLAGS = ${AM_CXXFLAGS}

src_libfty_rest_la_LDFLAGS = \
    -version-info @LTVER@ \
    $(LIBTOOL_EXTRA_LDFLAGS)

if ON_MINGW
src_libfty_rest_la_LDFLAGS += \
    -no-undefined \
    -avoid-version
endif

if ON_CYGWIN
src_libfty_rest_la_LDFLAGS += \
    -no-undefined \
    -avoid-version
endif

src_libfty_rest_la_LIBADD = ${project_libs}

if ENABLE_FTY_REST_SELFTEST
check_PROGRAMS += src/fty_rest_selftest
noinst_PROGRAMS += src/fty_rest_selftest
src_fty_rest_selftest_CPPFLAGS = ${AM_CPPFLAGS}
src_fty_rest_selftest_LDADD = ${program_libs}
src_fty_rest_selftest_SOURCES = src/fty_rest_selftest.cc
endif #ENABLE_FTY_REST_SELFTEST

# define custom target for all products of /src
src: \
		src/fty_rest_selftest \
		src/libfty_rest.la


# Directories with test fixtures optionally provided by the project,
# and with volatile RW data possibly created by a selftest program.
# It is up to the project authors to populate the RO directory with
# filenames called from the selftest methods, if any. They will be
# EXTRA_DISTed by the recipes generated with with zproject, however,
# and copied into builddir (if different from srcdir) to simplify
# the "distcheck" and similar tests (so selftest can use same paths).
# Note that the RO directory must exist to fulfill EXTRA_DIST, so we
# add a stub file that can be committed to SCM by project developers.
# The RW directory will be automatically wiped by "make distclean".
SELFTEST_DIR_RO = src/selftest-ro
SELFTEST_DIR_RW = src/selftest-rw

# This is recreated on every invocation (as a selftest dependency),
# so tests run in a clean environment
$(top_builddir)/$(SELFTEST_DIR_RW):
	rm -rf "$@"
	mkdir -p "$@"

# Note: for some reason "$<" misfired in rule below on Travis, so be explicit
if USING_VPATH
$(abs_top_builddir)/$(SELFTEST_DIR_RO): $(abs_top_srcdir)/$(SELFTEST_DIR_RO)
	@echo "   COPYDIR  $(SELFTEST_DIR_RO)"; \
	rm -rf "$@"; \
	cp -r "$(abs_top_srcdir)/$(SELFTEST_DIR_RO)" "$@"

$(top_builddir)/$(SELFTEST_DIR_RO): $(abs_top_builddir)/$(SELFTEST_DIR_RO)
endif

$(SELFTEST_DIR_RO): $(top_builddir)/$(SELFTEST_DIR_RO)

CLEANFILES += $(top_builddir)/$(SELFTEST_DIR_RW)/*

# Note that this syntax dists the whole directory - including subdirs (if any)
EXTRA_DIST += $(SELFTEST_DIR_RO)

clean-local: clean-local-selftest-ro clean-local-selftest-rw
.PHONY: clean-local-selftest-ro
clean-local-selftest-ro:
	@if test "$(top_builddir)" != "$(top_srcdir)" ; then \
		if test -d "$(top_builddir)/$(SELFTEST_DIR_RO)" ; then \
			chmod -R u+w "$(top_builddir)/$(SELFTEST_DIR_RO)" ; \
			rm -rf "$(top_builddir)/$(SELFTEST_DIR_RO)" ; \
		fi; \
	fi

# Unlike CLEANFILES setting above, this one whould also wipe created subdirs
.PHONY: clean-local-selftest-rw
clean-local-selftest-rw:
	@if test "$(top_builddir)" != "$(top_srcdir)" ; then \
		if test -d "$(top_builddir)/$(SELFTEST_DIR_RW)" ; then \
			chmod -R u+w "$(top_builddir)/$(SELFTEST_DIR_RW)" ; \
			rm -rf "$(top_builddir)/$(SELFTEST_DIR_RW)" ; \
		fi; \
	fi

check-empty-selftest-rw:
	if test -e $(top_builddir)/$(SELFTEST_DIR_RW) ; then \
		if test `find "$(top_builddir)/$(SELFTEST_DIR_RW)" | wc -l` -lt 1 ; then \
			echo "FATAL: selftest did not tidy up the data it wrote" >&2 ; \
			find "$(top_builddir)/$(SELFTEST_DIR_RW)" ; \
			exit 2; \
		else true ; fi; \
	else true ; fi

check-local: src/fty_rest_selftest $(top_builddir)/$(SELFTEST_DIR_RW) $(top_builddir)/$(SELFTEST_DIR_RO)
	$(LIBTOOL) --mode=execute $(builddir)/src/fty_rest_selftest
	$(MAKE) check-empty-selftest-rw

check-verbose: src/fty_rest_selftest $(top_builddir)/$(SELFTEST_DIR_RW) $(top_builddir)/$(SELFTEST_DIR_RO)
	$(LIBTOOL) --mode=execute $(builddir)/src/fty_rest_selftest -v
	$(MAKE) check-empty-selftest-rw

# Run the selftest binary under valgrind to check for memory leaks
memcheck: src/fty_rest_selftest $(top_builddir)/$(SELFTEST_DIR_RW) $(top_builddir)/$(SELFTEST_DIR_RO)
	$(LIBTOOL) --mode=execute valgrind --tool=memcheck \
		--leak-check=full --show-reachable=yes --error-exitcode=1 \
		--suppressions=$(srcdir)/src/.valgrind.supp \
		$(VALGRIND_OPTIONS) \
		$(builddir)/src/fty_rest_selftest
	$(MAKE) check-empty-selftest-rw

memcheck-verbose: src/fty_rest_selftest $(top_builddir)/$(SELFTEST_DIR_RW) $(top_builddir)/$(SELFTEST_DIR_RO)
	$(LIBTOOL) --mode=execute valgrind --tool=memcheck \
		--leak-check=full --show-reachable=yes --error-exitcode=1 \
		--suppressions=$(srcdir)/src/.valgrind.supp \
		$(VALGRIND_OPTIONS) \
		$(builddir)/src/fty_rest_selftest -v
	$(MAKE) check-empty-selftest-rw

# Run the selftest binary under valgrind to check for performance leaks
callcheck: src/fty_rest_selftest $(top_builddir)/$(SELFTEST_DIR_RW) $(top_builddir)/$(SELFTEST_DIR_RO)
	$(LIBTOOL) --mode=execute valgrind --tool=callgrind \
		$(VALGRIND_OPTIONS) \
		$(builddir)/src/fty_rest_selftest
	$(MAKE) check-empty-selftest-rw

callcheck-verbose: src/fty_rest_selftest $(top_builddir)/$(SELFTEST_DIR_RW) $(top_builddir)/$(SELFTEST_DIR_RO)
	$(LIBTOOL) --mode=execute valgrind --tool=callgrind \
		$(VALGRIND_OPTIONS) \
		$(builddir)/src/fty_rest_selftest -v
	$(MAKE) check-empty-selftest-rw

# Run the selftest binary under gdb for debugging
debug: src/fty_rest_selftest $(top_builddir)/$(SELFTEST_DIR_RW) $(top_builddir)/$(SELFTEST_DIR_RO)
	$(LIBTOOL) --mode=execute gdb -q \
		$(builddir)/src/fty_rest_selftest
	$(MAKE) check-empty-selftest-rw

debug-verbose: src/fty_rest_selftest $(top_builddir)/$(SELFTEST_DIR_RW) $(top_builddir)/$(SELFTEST_DIR_RO)
	$(LIBTOOL) --mode=execute gdb -q \
		$(builddir)/src/fty_rest_selftest -v
	$(MAKE) check-empty-selftest-rw

# Run the selftest binary with verbose switch for tracing
animate: src/fty_rest_selftest $(top_builddir)/$(SELFTEST_DIR_RW) $(top_builddir)/$(SELFTEST_DIR_RO)
	$(LIBTOOL) --mode=execute $(builddir)/src/fty_rest_selftest -v
	$(MAKE) check-empty-selftest-rw

animate-verbose: animate

if WITH_GCOV
coverage: src/fty_rest_selftest $(top_builddir)/$(SELFTEST_DIR_RW) $(top_builddir)/$(SELFTEST_DIR_RO)
	@echo "you had called configure --with-gcov"
	lcov --base-directory . --directory . --zerocounters -q
	$(MAKE) check
	lcov --base-directory . --directory . --capture -o coverage.info
	lcov --remove coverage.info "/usr*" -o coverage.info
	lcov --remove coverage.info "fty_rest_selftest.cc" -o coverage.info
	$(RM) -rf coverage/*
	genhtml -o coverage/ -t "fty-rest test coverage" --num-spaces 4 coverage.info
else
coverage: src/fty_rest_selftest
	@echo "call make clean && configure --with-gcov to enable code coverage"
	@exit 1
endif

################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Read the zproject/README.md for information about making permanent changes. #
################################################################################
