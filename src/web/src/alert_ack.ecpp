<#
 #
 # Copyright (C) 2015 - 2018 Eaton
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 2 of the License, or
 # (at your option) any later version.
 #
 # This program is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License along
 # with this program; if not, write to the Free Software Foundation, Inc.,
 # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 #
 #><#
/*!
 \file alert_ack.ecpp
 \author Karol Hrdina <KarolHrdina@Eaton.com>
 \brief Implementation of REST API call for PUT alerts/ack/<rule_name>/<element_name>
*/
#><%pre>
#include <exception>
#include <cxxtools/jsondeserializer.h>
#include <string>
#include <malamute.h>
#include <sys/types.h>
#include <unistd.h>

#include <fty_common_rest_helpers.h>
#include <fty_common_mlm_utils.h>
#include <fty_common_mlm_guards.h>
#include <fty_common.h>
#include <fty_common_macros.h>
#include <fty_common_db_asset.h>
static
int state_valid (const char *state) {
    assert (state);
    if (streq (state, "ACTIVE") ||
        streq (state, "ACK-WIP") ||
        streq (state, "ACK-IGNORE") ||
        streq (state, "ACK-PAUSE") ||
        streq (state, "ACK-SILENCE"))
        return 1;
    return 0;
}

</%pre>
<%request scope="global">
UserInfo user;
bool database_ready;
</%request>
<%cpp>
    // verify server is ready
    if (!database_ready) {
        log_debug ("Database is not ready yet.");
        std::string err = TRANSLATE_ME ("Database is not ready yet, please try again after a while.");
        http_die ("internal-error", err.c_str ());
    }

    // permission check
    static const std::map <BiosProfile, std::string> PERMISSIONS = {
            {BiosProfile::Admin,     "RU"}
            };
    CHECK_USER_PERMISSIONS_OR_DIE (PERMISSIONS);

// checked input arguments
std::string checked_rule_name;
std::string checked_element_name; // after last change this is unicode name
std::string checked_state;

// ##################################################
// BLOCK 1
// Sanity parameter check
{
    if (request.getMethod () != "PUT") {
        http_die ("method-not-allowed", request.getMethod ().c_str ());
    }

    std::string rule_name = request.getArg ("rule_name");
    std::string element_name = request.getArg ("element_name");
    log_debug ("Request parameters - Initial tainted values received:\n\trule_name = '%s'\n\telement_name = '%s'\n",
                rule_name.c_str (), element_name.c_str ());

    // Let's take a look at payload
    std::string state;
    cxxtools::SerializationInfo si;
    try {
        std::stringstream input (request.getBody (), std::ios_base::in);
        cxxtools::JsonDeserializer deserializer (input);
        deserializer.deserialize (si);
        si.getMember ("state") >>= state;
        if (state.empty ())
            throw std::runtime_error (TRANSLATE_ME ("property 'state' has empty value"));
    }
    catch (const std::exception& e) {
        log_debug ("Bad request document - invalid json: %s", e.what ());
        std::string err = TRANSLATE_ME ("Please check RFC-11 for valid json schema description.");
        http_die ("bad-request-document", err.c_str ());
    }
    log_debug ("state = '%s'", state.c_str ());

    if (!state_valid (state.c_str ())) {
        log_debug ("State is not a recognized valid alert state.");
        std::string err = TRANSLATE_ME ("one of the following values [ ACTIVE | ACK-WIP | ACK-IGNORE | ACK-PAUSE | ACK-SILENCE ].");
        http_die ("request-param-bad", "state", state.c_str (), err.c_str ());
    }
    else {
        checked_state = state;
    }
        http_errors_t errors;
        if (! check_asset_name ("element_name", element_name, errors)) {
            http_die_error (errors);
        }
        checked_element_name = element_name;
        if (! check_alert_rule_name ("rule_name", rule_name, errors)) {
            http_die_error (errors);
        }
        checked_rule_name = rule_name;
}


// connect to malamute
MlmClientGuard client(mlm_client_new ());
if (!client) {
    log_fatal ("mlm_client_new () failed.");
    std::string err = TRANSLATE_ME ("mlm_client_new () failed.");
    http_die ("internal-error", err.c_str ());
}

std::string client_name = utils::generate_mlm_client_id ("web.alert_ack");
log_debug ("malamute client name = '%s'.", client_name.c_str ());

int rv = mlm_client_connect (client, MLM_ENDPOINT, 1000, client_name.c_str ());
if (rv == -1) {
    log_fatal ("mlm_client_connect (endpoint = '%s', timeout = '%d', address = '%s') failed.",
                    MLM_ENDPOINT, 1000, client_name.c_str ());
    std::string err =  TRANSLATE_ME ("mlm_client_connect () failed.");
    http_die ("internal-error", err.c_str ());
}

// prepare rfc-evaluator-rules ADD message
zmsg_t *send_msg = zmsg_new ();
if (!send_msg) {
    log_fatal ("zmsg_new () failed.");
    std::string err =  TRANSLATE_ME ("zmsg_new () failed.");
    http_die ("internal-error", err.c_str ());
}
std::string asset_id;
rv = DBAssets::extname_to_asset_name (checked_element_name, asset_id);
if (rv == -1) {
    std::string msg_not_found = TRANSLATE_ME ("Cannot get asset ID for %s", checked_element_name.c_str ());
    http_die ("not-found", msg_not_found.c_str ());
}
if (rv == -2) {
    std::string err =  TRANSLATE_ME ("Database failure");
    http_die ("internal-error", err.c_str ());
}
zmsg_addstr (send_msg, checked_rule_name.c_str ());
zmsg_addstr (send_msg, asset_id.c_str ());
zmsg_addstr (send_msg, checked_state.c_str ());

// send it
if (mlm_client_sendto (client, AGENT_FTY_ALERT_LIST, "rfc-alerts-acknowledge", NULL, 1000, &send_msg) != 0) {
    log_debug ("mlm_client_sendto (address = '%s', subject = '%s', tracker = NULL, timeout = '%d') failed.",
        AGENT_FTY_ALERT_LIST, "rfc-alerts-acknowledge", 1000);
    zmsg_destroy (&send_msg);
    std::string err =  TRANSLATE_ME ("mlm_client_sendto () failed.");
    http_die ("internal-error", err.c_str ());
}

// wait for the right message or time-out
ZmsgGuard recv_msg;
ZpollerGuard poller(zpoller_new ( mlm_client_msgpipe (client), NULL));
if (!poller) {
    std::string err =  TRANSLATE_ME ("zpoller_new () failed.");
    http_die ("internal-error", err.c_str ());
}
while (true) {
    zsock_t *which = (zsock_t *) zpoller_wait (poller, 5000);
    if (which) {
        recv_msg = mlm_client_recv (client);
    }
    if (!recv_msg) {
        if (zpoller_expired (poller)) {
            log_error ("zpoller_wait (timeout = 5000) timed out waiting for message.");
            std::string err =  TRANSLATE_ME ("Timed out waiting for message.");
            http_die ("internal-error", err.c_str ());
        }
        log_error ("mlm_client_recv () failed.");
        std::string err =  TRANSLATE_ME ("mlm_client_recv () failed.");
        http_die ("internal-error", err.c_str ());
    }
    if (streq (mlm_client_sender (client), AGENT_FTY_ALERT_LIST))
        break;
}

// Got it
// Check subject
if (!streq (mlm_client_subject (client), "rfc-alerts-acknowledge")) {
    log_error ("Unexpected reply from '%s'. Subject expected = '%s', received = '%s'.",
        mlm_client_sender (client), "rfc-alerts-acknowledge", mlm_client_subject (client));
    std::string err =  TRANSLATE_ME ("Bad message.");
    http_die ("internal-error", err.c_str ());
}
// Check command. Can be OK or ERROR
ZstrGuard part (zmsg_popstr (recv_msg));
if (streq (part, "OK")) {
    part = zmsg_popstr (recv_msg);
    if (!part || !streq (part, checked_rule_name.c_str ())) {
        log_error ("Unexpected reply from '%s'. Expected OK/rule_name/element_name/state. Got OK/(null).", mlm_client_sender (client));
        std::string err =  TRANSLATE_ME ("Bad message.");
        http_die ("internal-error", err.c_str ());
    }
    part = zmsg_popstr (recv_msg);
    if (!part || !streq (part, asset_id.c_str ())) {
        log_error ("Unexpected reply from '%s'. Expected OK/rule_name/element_name/state. Got OK/rule_name/(null).", mlm_client_sender (client));
        std::string err =  TRANSLATE_ME ("Bad message.");
        http_die ("internal-error", err.c_str ());
    }
    part = zmsg_popstr (recv_msg);
    if (!part || !streq (part, checked_state.c_str ())) {
        log_error ("Unexpected reply from '%s'. Expected OK/rule_name/element_name/state. Got OK/rule_name/element_name/(null).", mlm_client_sender (client));
        std::string err =  TRANSLATE_ME ("Bad message.");
        http_die ("internal-error", err.c_str ());
    }
// TODO: rfc-11 is not written yet, json format can change freely
</%cpp>
{
    <$$ utils::json::jsonify ("rule_name", checked_rule_name) $>,
    <$$ utils::json::jsonify ("asset_id", asset_id) $>,
    <$$ utils::json::jsonify ("element_name", checked_element_name) $>,
    <$$ utils::json::jsonify ("state", checked_state) $>
}
<%cpp>
    return HTTP_OK;
}
if (streq (part, "ERROR")) {
    part = zmsg_popstr (recv_msg);
    if (!part) {
        log_error ("Unexpected reply from '%s'. Expected ERROR/reason. Got ERROR/(null).", mlm_client_sender (client));
        std::string err =  TRANSLATE_ME ("Bad message.");
        http_die ("internal-error", err.c_str ());
    }
    if (streq (part, "NOT_FOUND")) {
        log_error ("Alert identified by rule_name = '%s' and element_name = '%s' does not exist.",
            checked_rule_name.c_str (), asset_id.c_str ());
        std::string msg_not_found = TRANSLATE_ME ("Alert identified by rule name = '%s' and element name = '%s'", checked_rule_name.c_str (), checked_element_name.c_str ());
        http_die ("not-found", msg_not_found.c_str ());
    }
    if (streq (part, "BAD_STATE")) {
        log_error ("Alert identified by rule_name = '%s' and element_name = '%s' can not change state to '%s'.",
            checked_rule_name.c_str (), checked_element_name.c_str (), checked_state.c_str ());
        std::string msg_param_conflict = TRANSLATE_ME ("Alert identified by rule name = '%s', element name = '%s' can not change state to '%s'.", checked_rule_name.c_str (), checked_element_name.c_str (), checked_state.c_str ());
        http_die ("parameter-conflict", msg_param_conflict.c_str ());
    }
    log_error ("%s", part.get());
    std::string reason = part.get();
    std::string msg_unspecified = TRANSLATE_ME ("Error while setting state of alert identified by rule name = '%s', element = '%s' to '%s'", checked_rule_name.c_str (), checked_element_name.c_str (), reason.c_str ());
    http_die ("internal-error",
        msg_unspecified.c_str ());
}
// Message does not conform to protocol
log_error ("Unexptected reply from  '%s'. Does not conform to rfc-evaluator-rules.",
    mlm_client_sender (client));
std::string err =  TRANSLATE_ME ("Bad message.");
http_die ("internal-error", err.c_str ());
</%cpp>
