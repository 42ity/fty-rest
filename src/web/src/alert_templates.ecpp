<#
 #
 # Copyright (C) 2018 Eaton
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 2 of the License, or
 # (at your option) any later version.
 #
 # This program is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License along
 # with this program; if not, write to the Free Software Foundation, Inc.,
 # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 #
 #><#
/*!
 \file alert_templates.ecpp
 \author Gerald Guillaume <GeraldGuillaume@Eaton.com>
 \brief  return alert rule templates  known in /usr/share/bios/fty-autoconfig
*/
#>
<%pre>
#include <malamute.h>
#include <fty_common_mlm_tntmlm.h>
#include <fty_common_mlm_guards.h>
#include <fty_common_rest.h>
#include <fty_common_macros.h>
#include <cxxtools/split.h>
#include <cxxtools/jsonserializer.h>
#include <cxxtools/serializationinfo.h>
#include <cxxtools/jsondeserializer.h>

// encode metric GET request
static zmsg_t*
s_request_LIST ( zuuid_t *uuid, const char* type)
{
    assert (uuid);
    static const char* method = "LIST";
    zmsg_t *msg = zmsg_new ();
    zmsg_addstr (msg, zuuid_str_canonical (uuid));
    zmsg_addstr (msg, method);
    zmsg_addstr (msg, type);
    return msg;
}
</%pre>

<%request scope="global">
    UserInfo user;
</%request>
<%cpp>
// check user permissions

static const std::map <BiosProfile, std::string> PERMISSIONS = {
        {BiosProfile::Dashboard, "R"},
        {BiosProfile::Admin,     "R"}
        };
CHECK_USER_PERMISSIONS_OR_DIE (PERMISSIONS);

std::string type = qparam.param ("type");
// type
if (type.empty ()) {
    type = "all";
}
// connect to malamute
MlmClientPool::Ptr client = mlm_pool.get ();
if (!client.getPointer ()) {
    log_fatal ("mlm_pool.get () failed.");
    std::string err =  TRANSLATE_ME ("mlm_pool.get () failed.");
    http_die ("internal-error", err.c_str ());
}

ZuuidGuard uuid (zuuid_new ());

std::string requestType = "all";
zmsg_t *req_list = s_request_LIST (uuid,requestType.c_str ());

int rv = client->sendto ("fty-autoconfig", "rfc-evaluator-rules", 1000, &req_list);
if (rv == -1) {
    log_fatal (
            "client->sendto (address = '%s', subject = '%s', timeout = 1000) failed.",
            "fty-autoconfig", "rfc-evaluator-rules");
    std::string err =  TRANSLATE_ME ("client->sendto () failed");
    http_die ("internal-error", err.c_str ());
}

ZmsgGuard msg (client->recv (zuuid_str_canonical (uuid), 5));
if (!msg) {
    log_fatal ("client->recv (timeout = '5') returned NULL");
    std::string err =  TRANSLATE_ME ("client->recv () returned NULL");
    http_die ("internal-error", err.c_str ());
}

ZstrGuard result (zmsg_popstr (msg));
if (!result || !streq (result, "LIST")) {
    log_warning ("Error reply LIST template '%s', result=%s", requestType.c_str (), result.get ());
    std::string err =  TRANSLATE_ME ("LIST template bad response");
    http_die ("internal-error", err.c_str ());
}

result = zmsg_popstr (msg);
if (!result || !streq (result, requestType.c_str ())) {
    log_warning ("Error reply LIST template '%s', result=%s", requestType.c_str (), result.get ());
    std::string err =  TRANSLATE_ME ("LIST template bad response");
    http_die ("internal-error", err.c_str ());
}


cxxtools::SerializationInfo si;
si.setCategory (cxxtools::SerializationInfo::Category::Array);


ZstrGuard template_name (zmsg_popstr (msg));
ZstrGuard templat (zmsg_popstr (msg));
ZstrGuard asset_list (zmsg_popstr (msg));

while (template_name){

    bool matched = false;

    cxxtools::SerializationInfo si_templat_obj;

    //add name
    si_templat_obj.addMember ("name") <<= std::string (template_name);

    //add template
    cxxtools::SerializationInfo &si_templat = si_templat_obj.addMember ("template");
    std::stringstream input (templat.get ());
    cxxtools::JsonDeserializer  deserializer (input);
    deserializer.deserialize (si_templat);
    //the name should be set after the deserialization
    si_templat.setName ("template");

    if(type == "all")
    {
        matched = true;
    }
    else
    {
        try
        {
            //check the categories
            std::vector<std::string> categories;
            si_templat.getMember("threshold").getMember("categories") >>= categories;

            for(const std::string & categorie : categories)
            {
                if(categorie == type)
                {
                    matched = true;
                    break;
                }
            }
        }
        catch(const std::exception& e)
        {
            log_warning ("Error in extracting categories '%s'", e.what().c_str ());
        }
        
        

    }
    

    //add asset_id
    cxxtools::SerializationInfo &si_assets_id = si_templat_obj.addMember ("assets_id");
    si_assets_id.setCategory (cxxtools::SerializationInfo::Category::Array);
    if (asset_list && strlen (asset_list)>0){
       std::vector<std::string> asset_array;
       cxxtools::split (",", std::string (asset_list), std::back_inserter (asset_array));
       std::vector<std::string>::iterator it=asset_array.begin ();
       while ( it != asset_array.end ()) {
           si_assets_id.addMember ("") <<= *it;
           it++;
       }
    }

    //we add to the response if type matched
    if(matched)
    {
        si.addMember("") <<= si_templat_obj;
    }

    template_name = zmsg_popstr (msg);
    templat = zmsg_popstr (msg);
    asset_list = zmsg_popstr (msg);
}

// Send reply.
reply.setContentType("application/json;charset=UTF-8");
cxxtools::JsonSerializer serializer(reply.out());
serializer.beautify(true);
serializer.serialize(si);

</%cpp>
