<#
 #
 # Copyright (C) 2015 - 2018 Eaton
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 2 of the License, or
 # (at your option) any later version.
 #
 # This program is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License along
 # with this program; if not, write to the Free Software Foundation, Inc.,
 # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 #
 #><#
/*!
 * \file rack_total.ecpp
 * \author Tomas Halman <TomasHalman@Eaton.com>
 * \author Michal Vyskocil <MichalVyskocil@Eaton.com>
 * \author Alena Chernikava <AlenaChernikava@Eaton.com>
 * \author Karol Hrdina <KarolHrdina@Eaton.com>
 * \brief  Provides some metric about realpower consumption for racks
 */
 #><%pre>
#include <cxxtools/split.h>
#include <tntdb/error.h>
#include <exception>
#include <limits.h>

#include <fty_proto.h>

#include <sys/types.h>

#include <fty_common_rest_helpers.h>
#include <fty_common_db_asset.h>
#include <fty_common_mlm_tntmlm.h>
#include <fty_common_asset_types.h>
#include <fty_common_macros.h>
#include <fty_common_utf8.h>
#include <fty_shm.h>
#include "src/persist/assetcrud.h"
#include "shared/data.h"
#include "cleanup.h"
#include "shared/utils.h"
#include "shared/utilspp.h"

static const std::map<std::string, const std::string> PARAM_TO_SRC = {
    {"total_power", "realpower.default"},
    {"avg_power_last_day", "realpower.default_arithmetic_mean_24h"},
    {"avg_power_last_week", "realpower.default_arithmetic_mean_7d"},
    {"avg_power_last_month", "realpower.default_arithmetic_mean_30d"},
    {"avg_power_last_year", "<zero>"}
};

static double
s_total_rack_power(
    MlmClientPool::Ptr client,
    const std::string& src,
    const std::string& name)
{
    double ret = NAN;

    if (src == "<zero>")
        return ret;
    
    std::string mresult;
    if(fty::shm::read_metric_value(name, src, mresult) != 0) {
      log_warning ("Error reply for device '%s'", name.c_str ());
      return ret;
    }

    try {
        ret = std::stod (mresult);
    }
    catch (const std::exception &e) {
        ret = NAN;      // handle non numeric or too big (for double??) values as JSON null
    }

//    zuuid_t *uuid = zuuid_new ();
//    zmsg_t *request = s_rt_encode_GET (name.c_str(), uuid);
//    int rv = client->sendto ("fty-metric-cache", "latest-rt-data", 1000, &request);
//    if (rv == -1) {
//        zuuid_destroy (&uuid);
//        log_fatal (
//                "client->sendto (address = '%s', subject = '%s') failed",
//                "fty-metric-cache", "latest-rt-data");
//        throw std::runtime_error (TRANSLATE_ME ("client->sendto () failed."));
//    }
//
//    zmsg_t *msg = client->recv (zuuid_str_canonical (uuid), 5);
//    zuuid_destroy (&uuid);
//    if (!msg) {
//        throw std::runtime_error (TRANSLATE_ME ("client->recv () returned NULL."));
//    }
//
//    char *result = zmsg_popstr (msg);
//    if (!streq (result, "OK")) {
//        log_warning ("Error reply for device '%s', result=%s", name.c_str (), result);
//        zstr_free (&result);
//        zmsg_destroy (&msg);
//        return ret;
//    }
//
//    char *element = zmsg_popstr (msg);
//    if (!streq (element, name.c_str ())) {
//        log_warning ("element name (%s) from message differs from requested one (%s), ignoring", element, name.c_str ());
//        zstr_free (&element);
//        zmsg_destroy (&msg);
//        return ret;
//    }
//    zstr_free (&element);
//
//    zmsg_t *data = zmsg_popmsg (msg);
//    while (data) {
//        fty_proto_t *bmsg = fty_proto_decode (&data);
//        if (!bmsg) {
//            log_warning ("decoding fty_proto_t failed");
//            continue;
//        }
//
//        if (!streq (fty_proto_type (bmsg), src.c_str ())) {
//            fty_proto_destroy (&bmsg);
//            data = zmsg_popmsg (msg);
//            continue;
//        }
//        else {
//            try {
//                ret = std::stod (fty_proto_value (bmsg));
//            }
//            catch (const std::exception &e) {
//                ret = NAN;      // handle non numeric or too big (for double??) values as JSON null
//            };
//            fty_proto_destroy (&bmsg);
//            break;
//        }
//    }
//    zmsg_destroy (&msg);
    return ret;
}

static bool
s_is_valid_param(const std::string& p)
{
    return PARAM_TO_SRC.count(p) != 0;
}

</%pre>
<%thread scope="global">
asset_manager asset_mgr;
</%thread>
<%request scope="global">
UserInfo user;
bool database_ready;
</%request>
<%cpp>
    // verify server is ready
    if (!database_ready) {
        log_debug ("Database is not ready yet.");
        std::string err =  TRANSLATE_ME ("Database is not ready yet, please try again after a while.");
        http_die ("internal-error", err.c_str ());
    }

    // an example of macro usage
    static const std::map <BiosProfile, std::string> PERMISSIONS = {
            {BiosProfile::Dashboard, "R"},
            {BiosProfile::Admin,     "R"}
            };
    CHECK_USER_PERMISSIONS_OR_DIE (PERMISSIONS);

// checked parameters
std::string checked_arg1;
std::string checked_arg2;
{
    std::string arg1 = qparam.param ("arg1");
    std::string arg2 = qparam.param ("arg2");

   // arg1 is mandatory
    if (arg1.empty ()) {
        http_die ("request-param-required", "arg1");
    } else {
        checked_arg1 = arg1;
    }

   // arg2 is mandatory
    if (arg2.empty ()) {
        http_die ("request-param-required", "arg2");
    } else {
        checked_arg2 = arg2;
    }

} // end of parameters checking

    // arg2 is a single value OR a comma-separated list formed from a list of permissible values (PARAM_TO_SRC)
    std::vector <std::string> requestedParams;
    cxxtools::split (",", checked_arg2, std::back_inserter (requestedParams));

    for (const std::string& param: requestedParams) {
        if (!s_is_valid_param (param)) {
            std::string msg_expected = TRANSLATE_ME ("one of the following values: ['%s']", utils::join_keys_map (PARAM_TO_SRC, ",").c_str ());
            std::string msg_received = TRANSLATE_ME ("value '%s'", param.c_str());
            http_die ("request-param-bad", "arg2",
                msg_received.c_str (),
                msg_expected.c_str ());
        }
    }

    // arg1 is a single value OR a comma-separated list of element identifiers
    std::vector<std::string> racks; // list of ids of racks from argument string
    std::vector<std::string> rackNames;
    cxxtools::split(",", checked_arg1, std::back_inserter(racks));

    // ##################################################
    // connect to malamute
    MlmClientPool::Ptr client = mlm_pool.get ();
    if (!client.getPointer ()) {
        log_fatal ("mlm_pool.get () failed");
        std::string err =  TRANSLATE_ME ("mlm_pool.get () failed.");
        http_die ("internal-error", err.c_str ());
    }

    // check that racks exists
    auto allRacksShort = asset_mgr.get_items1("rack", "");
    if ( allRacksShort.status == 0 ) {
        std::string err =  TRANSLATE_ME ("Error while retrieving information about racks.");
        http_die ("internal-error", err.c_str ());
    }

    for (auto const& item : racks) {
        if ( !persist::is_ok_name (item.c_str ()) ) {
            std::string expected = TRANSLATE_ME ("valid asset name");
            http_die ("request-param-bad", "arg2", item.c_str (), expected.c_str ());
        }

        auto dbid = DBAssets::name_to_asset_id (item);
        if (dbid == -1) {
            http_die ("element-not-found", item.c_str ());
        }
        if (dbid == -2) {
            std::string err =  TRANSLATE_ME ("Connecting to database failed.");
            http_die ("internal-error", err.c_str ());
        }
        auto it = allRacksShort.item.find(dbid);
        if (it == allRacksShort.item.end()) {
            http_die ("element-not-found", item.c_str ());
        }
       std::pair <std::string,std::string> asset_names = DBAssets::id_to_name_ext_name (dbid);
       if (asset_names.first.empty () && asset_names.second.empty ()) {
           std::string err =  TRANSLATE_ME ("Database failure");
           http_die ("internal-error", err.c_str ());
       }
       rackNames.push_back (asset_names.second);
    }

    std::stringstream json;

    try {
        json <<
"{\n"
"\t\"rack_total\": [\n";

        for( size_t R = 0 ; R < racks.size(); R++ ) {
            json <<
"\t\t{\n"
"\t\t\t\"id\": \"" << racks[R] << "\",\n"
"\t\t\t\"name\": \"" << UTF8::escape(rackNames[R]) << "\",\n";
            for(size_t P = 0; P < requestedParams.size(); P++ ) {
                const std::string& key = requestedParams[P];
                const std::string& val = PARAM_TO_SRC.at(key);   //XXX: operator[] does not work here!
                double dvalue = s_total_rack_power (client, val, racks[R]);
                json << "\t\t\t\"" << key << "\": " << (std::isnan (dvalue) ? "null" : std::to_string(dvalue));
                json << ((P < requestedParams.size() - 1) ? "," : "" ) << "\n";
            };
            json << "\t\t}" << ( (R < racks.size() - 1) ? "," : "" ) << " \n";
        }
    json << "\t]\n}\n";
    }
    catch (const tntdb::Error& e) {
        log_error ("%s", e.what ());
        std::string err =  TRANSLATE_ME ("Database related error.");
        http_die ("internal-error", err.c_str ());
    }
    catch (const std::runtime_error &e) {
        log_error ("%s", e.what ());
        std::string err =  JSONIFY (e.what ());
        http_die ("internal-error", err.c_str ());
    }
    catch (const std::exception& e) {
        log_error ("%s", e.what ());
        std::string err =  TRANSLATE_ME ("Exception caught.");
        http_die ("internal-error", err.c_str ());
    }
</%cpp>
<$$ json.str() $>
