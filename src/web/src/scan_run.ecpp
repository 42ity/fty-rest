<#
 #
 # Copyright (C) 2016-2017 Eaton
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 2 of the License, or
 # (at your option) any later version.
 #
 # This program is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License along
 # with this program; if not, write to the Free Software Foundation, Inc.,
 # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 #
 #><#
/*!
 * \file    scan_run.ecpp
 * \author  Jana Rapava <JanaRapava@Eaton.com>
 * \brief   This call runs autodiscovery scan.
 */
 #><%pre>
#include <string>
#include "tntmlm.h"
#include "helpers.h"
#include "utils_web.h"
#include <cxxtools/jsondeserializer.h>

// stop request
static zmsg_t *
req_stop (zuuid_t *uuid)
{
    zmsg_t *msg = zmsg_new ();
    zmsg_addstr (msg, "STOPSCAN");
    zmsg_addstr (msg, zuuid_str_canonical (uuid));
    return msg;
}

// scan request
static zmsg_t *
req_scan (zuuid_t *uuid, char *range)
{
    zmsg_t *msg = zmsg_new ();
    zmsg_addstr (msg, "RUNSCAN");
    zmsg_addstr (msg, zuuid_str_canonical (uuid));
    //zmsg_addstr (msg, config);
    zmsg_addstr (msg, range);
    return msg;
}

// localscan request
static zmsg_t *
req_localscan (zuuid_t *uuid)
{
    zmsg_t *msg = zmsg_new ();
    zmsg_addstr (msg, "LOCALSCAN");
    zmsg_addstr (msg, zuuid_str_canonical (uuid));
    return msg;
}

static zmsg_t *
req_multiscan (zuuid_t *uuid, std::string json)
{
    zmsg_t *msg = zmsg_new ();
    zmsg_addstr (msg, "MULTISCAN");
    zmsg_addstr (msg, zuuid_str_canonical (uuid));
    //parsing json file
    try {
        
        std::stringstream input (json);
        cxxtools::JsonDeserializer deserializer (input);
        cxxtools::SerializationInfo request_doc;
        deserializer.deserialize (request_doc);
        int val =0;
        for (auto it = request_doc.begin(); it != request_doc.end(); ++it) {
            val++;
        }
        
        zmsg_addstrf(msg, "%" PRIi32, val);
        
        log_debug ("run_multiscan: %i different scans", val);

        std::string value_sn;
        for (auto it = request_doc.begin(); it != request_doc.end(); ++it) {
            if(it->getMember("subnet", value_sn) && value_sn != "")
                zmsg_addstr(msg, value_sn.c_str());
            else if(it->getMember("from_to", value_sn) && value_sn != "")
                zmsg_addstr(msg, value_sn.c_str());
            else { //ERROR not valid format
                zmsg_destroy(&msg);
                log_critical ("run_multiscan: error during parse. No \"subnet\" nor \"from_to\"");
                return NULL;
            }  
       }
        
    }
    catch (const std::exception& e) {
        return NULL;
    }
    
    return msg;
}

int
stop_scan()
{
    // connect to mlm client
    MlmClientPool::Ptr client = mlm_pool.get ();
    if (!client.getPointer ())
    {
        log_critical ("stop_scan: mlm_pool.get () failed.");
        return -1;
    }
    
    zuuid_t *uuid = zuuid_new ();
    zmsg_t *request = req_stop (uuid);   
    
    int rv = client->sendto ("fty-discovery", "stopscan", 1000, &request);
    
    if (rv == -1)
    {
        log_critical ("stop_scan: client->sendto (address = '%s') failed.", "fty-discovery");
        return -2;
    }

    zmsg_t *resp = client->recv (zuuid_str_canonical (uuid), 5);
    if (!resp)
    {
        log_critical ("stop_scan: client->recv (timeout = '20') returned NULL");
        return -3;
    }
    char *result = zmsg_popstr (resp);
    if (result) {
        if (streq (result, "OK")) {
                zstr_free (&result);
                return 0;
            }
        else if (streq (result, "ERROR")) {
            zstr_free (&result);
            return -4;
        }
        else {
            zstr_free (&result);
            return -5;
        }
    }
    else
        return -5;
    zstr_free (&result);
    zmsg_destroy(&resp);
    return 0;
}

int
run_localscan ()
{
     // connect to mlm client
    MlmClientPool::Ptr client = mlm_pool.get ();
    if (!client.getPointer ()) {
        log_critical ("run_localscan: mlm_pool.get () failed.");
        return -1;
    }

    zuuid_t *uuid = zuuid_new ();
    zmsg_t *request = req_localscan (uuid);   
    
    int rv = client->sendto ("fty-discovery", "localscan", 1000, &request);
    
    if (rv == -1) {
        log_critical ("run_localscan: client->sendto (address = '%s') failed.", "fty-discovery");
        return -2;
    }

    zmsg_t *resp = client->recv (zuuid_str_canonical (uuid), 5);
    if (!resp) {
        log_critical ("run_localscan: client->recv (timeout = '5') returned NULL");
        return -3;
    }
    char *result = zmsg_popstr (resp);
    if (result) {
        if (streq (result, "OK")) {
                zstr_free (&result);
                return 0;
            }
        else if (streq (result, "ERROR")) {
            zstr_free (&result);
            return -4;
        }
        else if (streq (result, "STOPPING")) {
            zstr_free (&result);
            return -6;
        }
        else if (streq (result, "RUNNING")) {
            zstr_free (&result);
            return -7;
        }
        else {
            zstr_free (&result);
            return -5;
        }
    }
    else
        return -5;
    zstr_free (&result);
    zmsg_destroy(&resp);
    return 0;
}

int
run_multiscan(std::string json)
{
     // connect to mlm client
    MlmClientPool::Ptr client = mlm_pool.get ();
    if (!client.getPointer ()) {
        log_critical ("run_multiscan: mlm_pool.get () failed.");
        return -1;
    }

    zuuid_t *uuid = zuuid_new ();
    zmsg_t *request = req_multiscan (uuid, json);   
    if(request == NULL) {
        return -8;
    }
    
    int rv = client->sendto ("fty-discovery", "multiscan", 1000, &request);
    
    if (rv == -1) {
        log_critical ("run_multiscan: client->sendto (address = '%s') failed.", "fty-discovery");
        return -2;
    }

    zmsg_t *resp = client->recv (zuuid_str_canonical (uuid), 5);
    if (!resp) {
        log_critical ("run_multiscan: client->recv (timeout = '5') returned NULL");
        return -3;
    }
    char *result = zmsg_popstr (resp);
    if (result) {
        if (streq (result, "OK")) {
                zstr_free (&result);
                return 0;
            }
        else if (streq (result, "ERROR")) {
            zstr_free (&result);
            return -8;
        }
        else if (streq (result, "STOPPING")) {
            zstr_free (&result);
            return -6;
        }
        else if (streq (result, "RUNNING")) {
            zstr_free (&result);
            return -7;
        }
        else {
            zstr_free (&result);
            return -5;
        }
    }
    else
        return -5;
    zstr_free (&result);
    zmsg_destroy(&resp);
    return 0;    
}

int
runscan (char *range)
{
    // connect to mlm client
    MlmClientPool::Ptr client = mlm_pool.get ();
    if (!client.getPointer ()) {
        log_critical ("scan_run: mlm_pool.get () failed.");
        return -1;
    }

    zuuid_t *uuid = zuuid_new ();
    zmsg_t *request = req_scan (uuid, range);
    int rv = client->sendto ("fty-discovery", "scan", 1000, &request);

    if (rv == -1) {
        log_critical ("scan_run: client->sendto (address = '%s') failed.", "fty-discovery");
        return -2;
    }

    zmsg_t *resp = client->recv (zuuid_str_canonical (uuid), 5);
    if (!resp) {
        log_critical ("scan_run: client->recv (timeout = '5') returned NULL");
        return -3;
    }
    char *result = zmsg_popstr (resp);
    if (result) {
        if (streq (result, "OK")) {
                zstr_free (&result);
                return 0;
            }
        else if (streq (result, "ERROR")) {
            zstr_free (&result);
            return -4;
        }
        else if (streq (result, "STOPPING")) {
            zstr_free (&result);
            return -6;
        }
        else if (streq (result, "RUNNING")) {
            zstr_free (&result);
            return -7;
        }
        else {
            zstr_free (&result);
            return -5;
        }
    }
    else
        return -5;
    zstr_free (&result);
    zmsg_destroy(&resp);
    return 0;
}
</%pre>
<%request scope="global">
UserInfo user;
</%request>
<%cpp>
    // permission check
    static const std::map <BiosProfile, std::string> PERMISSIONS = {
            {BiosProfile::Admin,     "CD"}
            };
    CHECK_USER_PERMISSIONS_OR_DIE (PERMISSIONS);
    
    //std::string config = request.getArg ("config");
    //std::string range = request.getArg ("range");
    std::string range = qparam.param("range");
    char *checked_range = strdup (range.c_str ());
    
    int rv;
    if(request.getMethod() == "DELETE") {
        rv = stop_scan();
    }
    else if (request.getMethod() == "POST") {
        if(range.empty()) {
            std::string json = request.getBody ();
            if( json.empty() )
                rv  = run_localscan ();
            else
                rv = run_multiscan(json);
        }
        else {
            rv = runscan (checked_range);
        }
    }
    else
        http_die("method-not-allowed", request.getMethod().c_str() );


    

    if (rv == -1)
        http_die ("internal-error", "mlmpool.get () failed.");
    else
    if (rv == -2)
        http_die ("internal-error", "client->sendto () failed.");
    else
    if (rv == -3)
        http_die ("internal-error", "client->recv () failed.");
    else
    if (rv == -4)
        http_die ("request-param-required", "<range>");
    else
    if (rv == -5)
        http_die ("internal-error", "fty-discovery returned malformed or unexpected message.");
    else
    if (rv == -6)
        http_die ("internal-error", "fty-discovery precedent scan currently stopping.");
    else
    if (rv == -7)
        http_die ("internal-error", "fty-discovery already have a scan running.");    
    else
    if (rv == -8)
        http_die("bad-request-document", "Please check RFC-11 for valid json schema description.");
    else
</%cpp>
