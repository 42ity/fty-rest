<#
 #
 # Copyright (C) 2016 - 2018 Eaton
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 2 of the License, or
 # (at your option) any later version.
 #
 # This program is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License along
 # with this program; if not, write to the Free Software Foundation, Inc.,
 # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 #
 #><#
/*!
 * \file email_vote.ecpp
 * \author Barbora Stepankova <BarboraStepankova@Eaton.com>
 * \author Michal Vyskocil <MichalVyskocil@Eaton.com>
 * \brief Sends voting email.
 */
 #><%pre>
#include <fty_common_macros.h>
#include <fty_common_rest_helpers.h>
#include <fty_common_mlm_tntmlm.h>
#include <fty_common_mlm_subprocess.h>
#include <fty_common_mlm_guards.h>
#include <fty_common_agents.h>
#include <fty_common_utf8.h>
#include <stdlib.h>
#include <sys/types.h>
#include <fstream>
#include <libgen.h> //POSIX version of basename!!
#include <fty_common_rest_audit_log.h>

// encode GET message for smtp agent
static zmsg_t*
s_smtp_GET_message (
        const char* to,
        int vote,
        const char* context,
        bool attach_system_state,
        zuuid_t *uuid)
{
    zmsg_t *msg = zmsg_new ();
    zmsg_addstr (msg, zuuid_str_canonical (uuid));

    zmsg_addstr (msg, to);
    char *subject = zsys_sprintf ("IPC vote context=%s", context);
    zmsg_addstr (msg, subject);
    zstr_free (&subject);

    std::string message = "Hi,\nthis product is ";
    if (vote == 1)
        message += "ugly";
    else
    if (vote == 2)
        message += "mediocre";
    else
        message += "amazing";
    message += "\n\nSincerely, your customer";
    zmsg_addstr (msg, message.c_str ());

    zhash_t *headers = zhash_new ();
    zhash_insert (headers, "X-Eaton-IPC-uuid", (void*) zuuid_str_canonical (uuid));
    zhash_insert (headers, "X-Eaton-IPC-context", (void*) context);
    zhash_insert (headers, "X-Eaton-IPC-vote", (void*) std::to_string (vote).c_str ());
    utils::email::x_headers (headers);

    zframe_t *frame = zhash_pack (headers);
    zmsg_add (msg, frame);
    zhash_destroy (&headers);

    if (attach_system_state) {
        log_info ("there's no tool to produce system state report, don't do anything yet");
    }
    return msg;
}

</%pre>
<%request scope="global">
UserInfo user;
</%request>
<%cpp>
    // check user permissions
    static const std::map <BiosProfile, std::string> PERMISSIONS = {
            {BiosProfile::Admin,         "C"},
            {BiosProfile::Dashboard,     "C"}
            };
    CHECK_USER_PERMISSIONS_OR_DIE (PERMISSIONS);

    std::string checked_to;
    unsigned vote = 0;
    std::string checked_context;
    bool attach_system_state = false;
    unsigned _timeout = 60;
    {
        std::string to = qparam.param ("to");
        if (to.empty ()) {
            const char* c_to = getenv ("BIOS_FEEDBACK_EMAIL");
            if (c_to)
                to = std::string {c_to};
            else
                to = std::string {"EatonProductFeedback@Eaton.com"};
        }
        checked_to = to;

        if (to.find ('@', 0) == std::string::npos) {
            std::string expected = TRANSLATE_ME ("valid email address");
            log_info_audit ("Request POST email_test FAILED");
            http_die ("request-param-bad", "to", to.c_str (), expected.c_str ());
        }
        std::string value = qparam.param ("value");
        if (value.empty ()) {
            log_info_audit ("Request POST email_test FAILED");
            http_die ("request-param-required", "value");
        }

        try {
            vote = std::stoi (value);
        }
        catch (const std::exception& e) {
            std::string expected = TRANSLATE_ME ("number 1-3");
            log_info_audit ("Request POST email_test FAILED");
            http_die ("request-param-bad", "value", value.c_str (), expected.c_str ());
        }

        std::string context = qparam.param ("context");
        if (context.empty ()) {
            log_info_audit ("Request POST email_test FAILED");
            http_die ("request-param-required", "context");
        }

        checked_context = context;

        std::string sys_state = qparam.param ("attach_system_state");
        if (sys_state == "yes")
            attach_system_state = true;

        std::string _stimeout = qparam.param ("_timeout");

        try {
            _timeout = std::stoi (_stimeout);
        }
        catch (const std::exception& e) {
            //pass
        }
    }

    // connect to mlm client
    MlmClientPool::Ptr client = mlm_pool.get ();
    if (!client.getPointer ()) {
        log_fatal ("Error: mlm_pool.get () failed.");
        std::string err =  TRANSLATE_ME ("mlm_pool.get () failed.");
        log_info_audit ("Request POST email_test FAILED");
        http_die ("internal-error", err.c_str ());
    }

    // send message
    ZuuidGuard uuid (zuuid_new ());
    zmsg_t *send = s_smtp_GET_message (
            checked_to.c_str (),
            vote,
            checked_context.c_str (),
            attach_system_state,
            uuid);
    int rv = client->sendto (AGENT_FTY_EMAIL_SENDMAIL_ONLY, "SENDMAIL", 1000, &send);

    if (rv == -1)
    {
        log_fatal (
                    "Error: client->sendto (address = '%s', subject = '%s', timeout = 1000) failed.",
                        AGENT_FTY_EMAIL_SENDMAIL_ONLY, "SENDMAIL");
        std::string err =  TRANSLATE_ME ("client->sendto () failed");
        zmsg_destroy (&send);
        log_info_audit ("Request POST email_test FAILED");
        http_die ("internal-error", err.c_str ());
    }

    ZmsgGuard recieve (client->recv (zuuid_str_canonical (uuid) , _timeout));
    if (!recieve)
    {
        std::string msg = TRANSLATE_ME ("Error: client-> recv (timeout = '%d') returned NULL", _timeout);
        log_error ("%s", msg.c_str ());
        log_info_audit ("Request POST email_test FAILED");
        http_die ("internal-error", msg.c_str ());
    }

    ZstrGuard err_code (zmsg_popstr (recieve));
    ZstrGuard err_message (zmsg_popstr (recieve));
    const char *msg_subject = client->subject ();
    std::string status;

    if (streq (msg_subject, "SENDMAIL-OK"))
    {
         status = "Succeeded";
    }
    else
    if (streq (msg_subject, "SENDMAIL-ERR"))
    {
        status = "Failed";
        log_info_audit ("Request POST email_test FAILED");
        http_die ("upstream-err", err_message.get ());
    }
    else
    {
        status = "Failed";
        log_fatal ("Error: message recieved with invalid subject.");
        std::string err =  TRANSLATE_ME ("client->recv () invalid message subject");
        log_info_audit ("Request POST email_test FAILED");
        http_die ("internal-error", err.c_str ());
    }
    log_info_audit ("Request POST email_test SUCCESS");

</%cpp>
{
    "test_status" :
    {
        "status" : "<$ status $>",
        "error_code" : <$ err_code $>,
        "reason" : "<$ err_message $>"
    }
}

