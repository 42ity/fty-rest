<#
 #
 # Copyright (C) 2015-2018 Eaton
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 2 of the License, or
 # (at your option) any later version.
 #
 # This program is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License along
 # with this program; if not, write to the Free Software Foundation, Inc.,
 # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 #
 #><#
/*!
 * \file asset_actions_POST.ecpp
 * \author Jean-Baptiste Boric <JeanBaptisteBorid@Eaton.com>
 * \brief Implementation of POST operation for actions on asset
 */
 #><%pre>
#include <cxxtools/regex.h>

#include <fty_proto.h>
#include <malamute.h>

#include "shared/data.h"
#include "shared/utils_json.h"
#include "web/src/asset_computed_impl.h"
#include <fty_common_rest_helpers.h>
#include <fty_common_asset_types.h>
#include <fty_common_dto.h>
#include <fty_common_mlm.h>
#include <fty_common_messagebus.h>
#include <fty_common_macros.h>
#include <cxxtools/serializationinfo.h>
#include <cxxtools/jsondeserializer.h>
#include <fty_common_rest_audit_log.h>
</%pre>
<%request scope="global">
UserInfo user;
bool database_ready;
</%request>
<%cpp>
    // verify server is ready
    if (!database_ready) {
        log_debug ("Database is not ready yet.");
        std::string err =  TRANSLATE_ME ("Database is not ready yet, please try again after a while.");
        log_error_audit ("Request CREATE asset_actions FAILED");
        http_die ("internal-error", err.c_str ());
    }

    // check user permissions
    static const std::map <BiosProfile, std::string> PERMISSIONS = {
            {BiosProfile::Admin,     "C"}
            };
    std::string audit_msg = std::string ("Request CREATE asset_actions FAILED");
    CHECK_USER_PERMISSIONS_OR_DIE_AUDIT (PERMISSIONS, audit_msg.empty () ? nullptr : audit_msg.c_str ());
    std::string checked_id; // user-friendly identifier

    // sanity check
    {
        std::string id = request.getArg ("id");
        if ( id.empty () ) {
            log_error_audit ("Request CREATE asset_actions FAILED");
            http_die ("request-param-required", "id");
        }

        if ( !persist::is_ok_name (id.c_str ()) ) {
            std::string err = TRANSLATE_ME ("valid asset name");
            log_error_audit ("Request CREATE asset_actions id %s FAILED", id.c_str ());
            http_die ("request-param-bad", "id", id.c_str (), err.c_str ());
        }
        checked_id = id;
    }
    // end sanity checks
    std::string item;
    DBAssets::name_to_extname (checked_id, item);

    auto msgbus = std::unique_ptr<messagebus::MessageBus>(messagebus::MlmMessageBus(MLM_ENDPOINT, messagebus::getClientId("tntnet")));
    msgbus->connect();

    // Read json, transform to command list
    cxxtools::SerializationInfo si;
    dto::commands::PerformCommandsQueryDto commandList;

    // read json and deserialize it
    try {
        std::stringstream input (request.getBody (), std::ios_base::in);
        cxxtools::JsonDeserializer deserializer (input);
        deserializer.deserialize (si);
        if (si.category () != cxxtools::SerializationInfo::Category::Array) {
            throw std::runtime_error ("expected array of objects");
        }

        for (const auto &i : si) {
            dto::commands::Command command;
            command.asset = checked_id;

            if (i.category () != cxxtools::SerializationInfo::Category::Object) {
                throw std::runtime_error ("expected array of objects");
            }
            if (!i.getMember ("command", command.command)) {
                throw std::runtime_error ("expected command key in object");
            }
            i.getMember ("target", command.target);
            i.getMember ("argument", command.argument);
            commandList.commands.push_back (command);
        }
    }
    catch (const std::exception& e) {
        std::string err = std::string ("Error while parsing document: ") + e.what () + ".";
        log_error (err.c_str ());
        log_error_audit ("Request CREATE asset_actions asset %s FAILED", item.c_str ());
        http_die ("bad-request-document", TRANSLATE_ME (err.c_str ()).c_str ());
    }

    messagebus::Message msgRequest;
    msgRequest.metaData()[messagebus::Message::CORRELATION_ID] = messagebus::generateUuid();
    msgRequest.metaData()[messagebus::Message::TO] = "fty-nut-command";
    msgRequest.metaData()[messagebus::Message::SUBJECT] = "PerformCommands";
    msgRequest.userData() << commandList;
    auto msgReply = msgbus->request("ETN.Q.IPMCORE.POWERACTION", msgRequest, 10);

    if (msgReply.metaData()[messagebus::Message::STATUS] != "ok") {
        std::string err = "Request to fty-nut-command failed.";
        log_error (err.c_str ());
        log_error_audit ("Request CREATE asset_actions asset %s FAILED", item.c_str ());
        http_die ("precondition-failed", TRANSLATE_ME (err.c_str ()).c_str ());
    }
    log_info_audit ("Request CREATE asset_actions asset %s SUCCESS", item.c_str ());
    reply.out() << "{}" << std::endl;
</%cpp>
