<#
 #
 # Copyright (C) 2015-2018 Eaton
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 2 of the License, or
 # (at your option) any later version.
 #
 # This program is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License along
 # with this program; if not, write to the Free Software Foundation, Inc.,
 # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 #
 #><#
/*!
 * \file asset_actions_POST.ecpp
 * \author Jean-Baptiste Boric <JeanBaptisteBorid@Eaton.com>
 * \brief Implementation of POST operation for actions on asset
 */
 #><%pre>
#include <cxxtools/regex.h>

#include <fty_proto.h>
#include <malamute.h>

#include "shared/data.h"
#include "shared/utils_json.h"
#include "web/src/asset_computed_impl.h"
#include <fty_common_rest_helpers.h>
#include <fty_common_asset_types.h>
#include <fty_common_mlm.h>
#include <fty_common_mlm_utils.h>
#include <fty_common_macros.h>
#include <cxxtools/serializationinfo.h>
#include <cxxtools/jsondeserializer.h>
#include <fty_common_rest_audit_log.h>
</%pre>
<%request scope="global">
UserInfo user;
bool database_ready;
</%request>
<%cpp>
    // verify server is ready
    if (!database_ready) {
        log_debug ("Database is not ready yet.");
        std::string err =  TRANSLATE_ME ("Database is not ready yet, please try again after a while.");
        log_error_audit ("Request CREATE asset_actions FAILED");
        http_die ("internal-error", err.c_str ());
    }

    // check user permissions
    static const std::map <BiosProfile, std::string> PERMISSIONS = {
            {BiosProfile::Admin,     "C"}
            };
    std::string audit_msg = std::string ("Request CREATE asset_actions FAILED");
    CHECK_USER_PERMISSIONS_OR_DIE_AUDIT (PERMISSIONS, audit_msg.empty () ? nullptr : audit_msg.c_str ());
    std::string checked_id; // user-friendly identifier

    // sanity check
    {
        std::string id = request.getArg ("id");
        if ( id.empty () ) {
            log_error_audit ("Request CREATE asset_actions FAILED");
            http_die ("request-param-required", "id");
        }

        if ( !persist::is_ok_name (id.c_str ()) ) {
            std::string err = TRANSLATE_ME ("valid asset name");
            log_error_audit ("Request CREATE asset_actions id %s FAILED", id.c_str ());
            http_die ("request-param-bad", "id", id.c_str (), err.c_str ());
        }
        checked_id = id;
    }
    // end sanity checks
    std::string item;
    DBAssets::name_to_extname (checked_id, item);

    // connect to malamute
    MlmClientGuard client (mlm_client_new ( ));
    if (!client) {
        std::string err = "mlm_client_new () failed.";
        log_error (err.c_str ());
        log_error_audit ("Request CREATE asset_actions asset %s FAILED", item.c_str ());
        http_die ("internal-error", TRANSLATE_ME (err.c_str ()).c_str ());
    }

    std::string client_name = utils::generate_mlm_client_id ("web.asset_get");
    log_debug ("malamute client name = '%s'.", client_name.c_str ());

    int rv = mlm_client_connect (client, MLM_ENDPOINT, 1000, client_name.c_str ());
    if (rv == -1) {
        std::string err = "mlm_client_connect () failed.";
        log_error (err.c_str ());
        log_error_audit ("Request CREATE asset_actions asset %s FAILED", item.c_str ());
        http_die ("internal-error", TRANSLATE_ME (err.c_str ()).c_str ());
    }
    // end connect to malamute

    // Read json, transform to command list
    cxxtools::SerializationInfo si;
    std::vector<std::pair<std::string, std::string>> commands;
    // read json and deserialize it
    try {
        std::stringstream input (request.getBody (), std::ios_base::in);
        cxxtools::JsonDeserializer deserializer (input);
        deserializer.deserialize (si);
        if (si.category () != cxxtools::SerializationInfo::Category::Array) {
            throw std::runtime_error ("expected array of objects");
        }

        for (const auto &i : si) {
            if (i.category () != cxxtools::SerializationInfo::Category::Object) {
                throw std::runtime_error ("expected array of objects");
            }
            std::string cmd, param;
            if (!i.getMember ("command", cmd)) {
                throw std::runtime_error ("expected command key in object");
            }
            i.getMember ("parameter", param);
            commands.emplace_back (cmd, param);
        }
    }
    catch (const std::exception& e) {
        std::string err = std::string ("Error while parsing document: ") + e.what () + ".";
        log_error (err.c_str ());
        log_error_audit ("Request CREATE asset_actions asset %s FAILED", item.c_str ());
        http_die ("bad-request-document", TRANSLATE_ME (err.c_str ()).c_str ());
    }

    // send request
    zmsg_t *rqst = zmsg_new ();
    zmsg_addstr (rqst, "DO_COMMANDS");
    zmsg_addstr (rqst, "");
    zmsg_addstr (rqst, checked_id.c_str ());
    for (const auto &i : commands) {
        zmsg_addstr (rqst, i.first.c_str ());
        zmsg_addstr (rqst, i.second.c_str ());
    }

    if (mlm_client_sendto (client, "fty-nut-command", "power-actions", nullptr, 5000, &rqst) != 0) {
        std::string err = "Failed to send request to fty-nut-command.";
        log_error (err.c_str ());
        log_error_audit ("Request CREATE asset_actions asset %s FAILED", item.c_str ());
        http_die ("internal-error", TRANSLATE_ME (err.c_str ()).c_str ());
    }

    // wait for reply
    ZpollerGuard poller (zpoller_new (mlm_client_msgpipe (client), nullptr));
    if (!zpoller_wait (poller, 5000)) {
        std::string err = "zmq_poll () failed.";
        log_error (err.c_str ());
        log_error_audit ("Request CREATE asset_actions asset %s FAILED", item.c_str ());
        http_die ("internal-error", TRANSLATE_ME (err.c_str ()).c_str ());
    }

    ZmsgGuard msg (mlm_client_recv (client));
    ZstrGuard status (zmsg_popstr (msg));
    ZstrGuard uuid (zmsg_popstr (msg));
    if (!streq (status, "OK")) {
        ZstrGuard errMsg (zmsg_popstr (msg));
        std::string err = std::string ("Request to fty-nut-command failed: ") + errMsg.get () + ".";
        log_error (err.c_str ());
        log_error_audit ("Request CREATE asset_actions asset %s FAILED", item.c_str ());
        http_die ("precondition-failed", TRANSLATE_ME (err.c_str ()).c_str ());
    }
    log_info_audit ("Request CREATE asset_actions asset %s SUCCESS", item.c_str ());
</%cpp>
