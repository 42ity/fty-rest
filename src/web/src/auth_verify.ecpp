<#
 #
 # Copyright (C) 2015 - 2020 Eaton
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 2 of the License, or
 # (at your option) any later version.
 #
 # This program is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License along
 # with this program; if not, write to the Free Software Foundation, Inc.,
 # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 #
 #><#
/*!
 * \file auth_verify.ecpp
 * \author Jim Klimov <EvgenyKlimov@Eaton.com>
 * \author Michal Hrusecky <MichalHrusecky@Eaton.com>
 * \author Michal Vyskocil <MichalVyskocil@Eaton.com>
 * \brief  Check if token is valid or not
 */
 #><%pre>
#include <tnt/httpmessage.h>
#include <tnt/httpheader.h>
#include <fty_common_rest_helpers.h>
#include <fty_common_rest_tokens.h>

#ifdef DEBUG
#include <iostream>
#include <sstream>
#include <iomanip>
#include <string>
#endif

</%pre>
<%request scope="global">
UserInfo user;
std::string gaccess_token;
</%request>
<%cpp>

    // do nothing if user is yet authenticated
    if (user.profile() != BiosProfile::Anonymous)
    {
        /* Go on to next module in tntnet.xml */
        return DECLINED;
    }

std::string checked_access_token;
{
    // NOTE: auth_verify is not limited by CHECK_USER_PERMISSIONS_OR_DIE
    //       this is where the token is actually verified and user info
    //       fill'ed

    // sanitize check
    std::string access_token = gaccess_token;
    check_regex_text_or_die ("access_token", access_token, checked_access_token, "^[-/._~+/a-z0-9]{0,255}={0,10}$");
    // sanitize check end
}

/* We can get the token from header, or from GET or POST request args */
if(!checked_access_token.empty()) {
    long int uid;
    long int tme;
    long int gid;
    char *user_name;
    BiosProfile profile = tokens::get_instance()->verify_token(checked_access_token,&tme, &uid, &gid, &user_name);

    if (profile != BiosProfile::Anonymous) {
        user.profile (profile);
        user.uid (uid);
        user.gid (gid);
        user.login (user_name);
        delete[] user_name; user_name = NULL;

        // Some of our code expects re-authentication for sensitive requests,
        // if implemented by a third-party extended authentication module that
        // would handle auth token processing and verification with higher
        // priority than this code. In builds using *this* module, default to
        // pretending the re-auth happened successfully if the session is OK.
        if (!user.reauthInitialized()) {
            const char *envvar = getenv("REAUTH_FALLBACK_DEFAULT");

            // The hardcoded default in absence of envvar or invalid value in
            // it - allows sensitive components to work with a valid token and
            // no reauth implementation (passed from third-party servlets).
            bool defaultval = true;
            if ( envvar != NULL) {
                if ( (!strncasecmp("TRUE", envvar, 4)) || (!strncasecmp("YES", envvar, 3)) || (!strncasecmp("ON", envvar, 2)) || (!strncasecmp("1", envvar, 1)) ) {
                    defaultval = true;
                } else if ( (!strncasecmp("FALSE", envvar, 5)) || (!strncasecmp("NO", envvar, 2)) || (!strncasecmp("OFF", envvar, 3)) || (!strncasecmp("0", envvar, 1)) ) {
                    defaultval = false;
                }
            }
            log_debug ("Defaulting reauth-happened flag to: %s", defaultval ? "true" : "false");
            user.reauthDefault (defaultval);
        } // if reauth flag was not definitely set yet; else don't waste time
    } else {
        http_die("not-authorized", "");
    }
}

#ifdef DEBUG
    reply.setHeader( (std::string)"X-Auth-Token-Presented: ",
                "\"" + checked_access_token + "\"" );

    std::ostringstream os;
    os << "access_auth_level=\"" << static_cast<int> (user.profile ()) << "\"";
    reply.setHeader( (std::string)"X-Auth-Verify: ", os.str() );
#endif // DEBUG

/* Go on to next module in tntnet.xml */
return DECLINED;
</%cpp>
