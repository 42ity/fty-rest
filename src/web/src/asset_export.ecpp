<#
 #
 # Copyright (C) 2015 - 2018 Eaton
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 2 of the License, or
 # (at your option) any later version.
 #
 # This program is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License along
 # with this program; if not, write to the Free Software Foundation, Inc.,
 # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 #
 #><#
/*!
 * \file asset_export.ecpp
 * \author Michal Vyskocil <MichalVyskocil@Eaton.com>
 * \brief  exports assets into csv file
 */
 #><%pre>
#include <string>
#include <regex>
#include <string.h>
#include <time.h>
#include <fty_common_rest_helpers.h>
#include <fty_common_macros.h>
#include <fty_common_db_asset.h>
#include "src/db/inout.h"
#include "shared/utils.h"
</%pre>
<%request scope="global">
UserInfo user;
bool database_ready;
</%request>
<%cpp>
{
    // verify server is ready
    if (!database_ready) {
        log_debug ("Database is not ready yet.");
        std::string err =  TRANSLATE_ME ("Database is not ready yet, please try again after a while.");
        http_die ("internal-error", err.c_str ());
    }

    // check user permissions
    static const std::map <BiosProfile, std::string> PERMISSIONS = {
            {BiosProfile::Dashboard, "R"},
            {BiosProfile::Admin,     "R"}
            };
    CHECK_USER_PERMISSIONS_OR_DIE (PERMISSIONS);

    // sanity checks
    std::string dc = request.getArg("dc");
    int64_t dc_id = -1;
    if (!dc.empty ()) {
        // check if element exists and is a DC
        dc_id = DBAssets::name_to_asset_id_check_type (dc, persist::type_to_typeid ("datacenter"));
        if (dc_id < 0) {
            std::string expected = TRANSLATE_ME ("not a datacenter");
            std::string received = TRANSLATE_ME ("existing asset which is a datacenter");
            http_die ("request-param-bad", "dc", expected.c_str (), received.c_str ());
        }
    }

    char buf[21] = {0x00};
    int r = calendar_to_datetime(time(NULL), buf, 21);
    if (r != 0) {
        std::string err =  TRANSLATE_ME ("Cannot get system time");
        http_die ("internal-error", err.c_str ());
    }

    // replace colons ':' by dash '-'
    // prevents http://latkin.org/blog/2016/07/20/git-for-windows-accidentally-creates-ntfs-alternate-data-streams/
    // for our Windows users
    for (char* c = strchr (buf, ':');
               c != NULL;
               c = strchr (c, ':'))
    {
        *c = '-';
    }

    if (!dc.empty()) {
        std::string dc_ename;
        DBAssets::name_to_extname (dc, dc_ename);
        //escape special characters
        dc_ename = std::regex_replace(dc_ename, std::regex("( |\t)"), "_");
        reply.setHeader(tnt::httpheader::contentDisposition, "attachment; filename=\"asset_export_" + dc_ename + "_" + std::string{buf} + ".csv\"");
    }
    else {
        reply.setHeader(tnt::httpheader::contentDisposition, "attachment; filename=\"asset_export" + std::string{buf} + ".csv\"");
    }

    try {
        persist::export_asset_csv(reply.out(), dc_id);
    }
    catch (const std::exception &e) {
        LOG_END_ABNORMAL(e);
        http_die("internal-error", "");
    }
    reply.setContentType ("text/csv;charset=UTF-8");
}
</%cpp>
