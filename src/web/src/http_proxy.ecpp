<#
 #
 # Copyright (C) 2015 - 2018 Eaton
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 2 of the License, or
 # (at your option) any later version.
 #
 # This program is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License along
 # with this program; if not, write to the Free Software Foundation, Inc.,
 # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 #
 #><#
/*!
 * \file http_proxy.ecpp
 * \author Arnaud Quette <ArnaudQuette@Eaton.com>
 * \brief  manipulating with system HTTP proxy settings
 */
 #><%pre>
#include <iostream>
#include <sstream>
#include <fstream>
#include <algorithm>
#include <cxxtools/regex.h>
#include <cxxtools/jsondeserializer.h>
#include "shared/utils.h"
#include <fty_common_macros.h>
#include <fty_common_rest_helpers.h>
</%pre>
<%request scope="global">
UserInfo user;
</%request>
<%cpp>

    // check user permissions
    static const std::map <BiosProfile, std::string> PERMISSIONS = {
            {BiosProfile::Dashboard, "R"},
            {BiosProfile::Admin,     "RU"}
            };
    CHECK_USER_PERMISSIONS_OR_DIE (PERMISSIONS);

    // The file is formatted as is:
    //      http_proxy=<value>
    //      https_proxy=<value>
    //      ftp_proxy=<value>
    // GET: We only get the first line, and extract <value>
    // PUT: We build the 3 lines using the single provided value

    std::string checked_http_proxy;
    std::string proxy_line;
    std::string path ("/etc/default/fty-proxy");

    // Process PUT first, so that we always read back the current content
    if(request.getMethod() == "PUT") {
        std::string proxy_file_content;
        std::string proxy_line;

        cxxtools::SerializationInfo si;
        try {
            std::stringstream input (request.getBody(), std::ios_base::in);
            cxxtools::JsonDeserializer deserializer (input);
            deserializer.deserialize (si);
            si.getMember ("url") >>= proxy_line;
        }
        catch (const std::exception& e) {
            log_debug ("Bad request document - invalid json: %s", e.what ());
            std::string err =  TRANSLATE_ME ("Please check RFC-11 for valid json schema description.");
            http_die ("bad-request-document", err.c_str ());
        }
        log_debug ("proxy_line = '%s'", proxy_line.c_str ());

        if (!proxy_line.empty ()) {
            // Sanity check
            // Append "http://" if not already present
            static cxxtools::Regex url_scheme ("^http(.?)://(.*)");
            if (!url_scheme.match (proxy_line))
                proxy_line = "http://" + proxy_line;
        }

        std::ofstream out_file (path);
        if (!out_file) {
            std::string err =  TRANSLATE_ME ("open HTTP proxy file for writing");
            http_die ("internal-error", err.c_str ());
        }

        // Build content
        proxy_file_content = "http_proxy=\"" + proxy_line + "\"\n";
        proxy_file_content += "https_proxy=\"" + proxy_line + "\"\n";
        proxy_file_content += "ftp_proxy=\"" + proxy_line + "\"\n";
        proxy_file_content += "export http_proxy https_proxy ftp_proxy\n";

        out_file << proxy_file_content;
        out_file.close();
    }

    std::ifstream in_file (path);
    if (!in_file) {
        std::string err =  TRANSLATE_ME ("Cannot open HTTP proxy file for reading");
        http_die ("internal-error", err.c_str ());
    }

    getline(in_file, proxy_line);
    in_file.close();

    if (!proxy_line.empty()) {
        checked_http_proxy = proxy_line.substr(proxy_line.find("=") + 1);
        checked_http_proxy.erase(std::remove(checked_http_proxy.begin(), checked_http_proxy.end(), '"'), checked_http_proxy.end());
    }
</%cpp>
{
    "url" : "<$ checked_http_proxy $>"
}
