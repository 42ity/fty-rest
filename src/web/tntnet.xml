<?xml version="1.0" encoding="UTF-8"?>
<!--
  This is the main configuration file for tntnet.

  You can find documentation about the parameters in the man page tntnet.xml(7)
  -->
<tntnet>
  <mappings>
    <!-- Global variables setup regarding server status -->
    <mapping>
      <target>server_status@libfty_rest</target>
    </mapping>

    <!-- Everything SSL only -->
    <mapping>
      <target>ssl_redirect@libfty_rest</target>
    </mapping>
    <!-- Set reply default and security HTTP header -->
    <mapping>
      <target>security_headers@libfty_rest</target>
      <args>
          <!-- default headers -->
          <Cache-Control>no-store</Cache-Control>
          <Pragma>no-cache</Pragma>
          <!-- security headers -->
          <X-XSS-Protection>1</X-XSS-Protection>
          <X-Content-Type-Options>nosniff</X-Content-Type-Options>
      </args>
    </mapping>
    <!-- Unset security HTTP header for specific mapping -->
    <mapping>
      <target>security_removeheaders@libfty_rest</target>
      <url>\.(ttf|otf|eot|woff)$</url>
      <args>
          <Cache-Control/>
          <Pragma/>
      </args>
    </mapping>
    <!-- Serve static files -->
    <mapping>
      <target>static@tntnet</target>
      <pathinfo>./$1</pathinfo>
      <url>^/((assets|[b-z]).*)</url>
    </mapping>
    <mapping>
      <target>static@tntnet</target>
      <pathinfo>./index.html</pathinfo>
      <url>^/$</url>
    </mapping>
    <mapping>
      <target>static@tntnet</target>
      <pathinfo>./favicon.ico</pathinfo>
      <url>^/favicon.ico</url>
    </mapping>
    <mapping>
      <target>static@tntnet</target>
      <pathinfo>/usr/share/common-licenses/Eaton-EULA</pathinfo>
      <url>^/legal/Eaton-EULA</url>
    </mapping>
    <mapping>
      <target>static@tntnet</target>
      <pathinfo>/usr/share/doc/$1</pathinfo>
      <url>^/legal/(.*)$</url>
    </mapping>

    <!-- Make sure everybody speaks json from now on -->
    <mapping>
      <target>json@libfty_rest</target>
    </mapping>
    <!-- Get the access Token to make it easier to handle it later. -->
    <mapping>
      <target>find_access_token@libfty_rest</target>
    </mapping>
    <!-- We are getting authorized -->
    <mapping>
      <target>auth@libfty_rest</target>
      <url>^/api/v1/oauth2/token$</url>
    </mapping>
    <!-- Set BiosProfile profile variable if the request is authenticated
         and validate rights are sufficient.
         Defaults to BiosProfile::Anonymous
      -->
    <mapping>
      <target>auth_verify@libfty_rest</target>
    </mapping>


    <!-- Here starts the real API -->


    <!-- SysInfo mapping -->
    <!-- Implementation tests BiosProfile profile variable to limit visibility of some data -->
    <mapping>
      <target>sysinfo@libfty_rest</target>
      <url>^/api/v1/admin/sysinfo(/?|\?.+=.+)$</url>
    </mapping>

    <!-- Token revocation -->
    <mapping>
      <target>auth@libfty_rest</target>
      <url>^/api/v1/oauth2/revoke$</url>
      <method>(POST|PUT)</method>
    </mapping>

    <!-- alerts/activelist -->
    <mapping>
        <target>alert_list@libfty_rest</target>
        <method>GET</method>
        <url>^/api/v1/alerts/activelist(\?[^/]+)?$</url>
    </mapping>

    <mapping>
        <target>admin_sse@libfty_rest</target>
        <method>GET</method>
        <url>^/api/v1/sse.*$</url>
    </mapping>

    <!-- alerts/ack -->
    <mapping>
        <target>alert_ack@libfty_rest</target>
        <method>PUT</method>
        <url>^/api/v1/alerts/ack/([^/]+)/([^/]+)/?$</url>
        <args>
            <rule_name>$1</rule_name>
            <element_name>$2</element_name>
        </args>
    </mapping>

    <!-- alerts/rules -->
    <mapping>
        <target>alert_rules_list@libfty_rest</target>
        <method>GET</method>
        <url>^/api/v1/alerts/rules([^/]*)$</url>
    </mapping>

    <mapping>
        <target>alert_rules_detail@libfty_rest</target>
        <method>GET</method>
        <url>^/api/v1/alerts/rules/([^/]*)$</url>
        <args>
            <name>$1</name>
        </args>
    </mapping>

    <mapping>
        <target>alert_rules@libfty_rest</target>
        <method>(POST|PUT)</method>
        <url>^/api/v1/alerts/rules(/|/([^/]+)){0,1}$</url>
        <args>
            <name>$2</name>
        </args>
    </mapping>

    <!-- admin/systemctl GET -->
    <mapping>
        <target>systemctl@libfty_rest</target>
        <method>GET</method>
        <url>^/api/v1/admin/systemctl/([^/]+)(/(.*))?$</url>
        <args>
            <operation>$1</operation>
            <!-- ?: non-capture group does not work, so we work around by capturing $3 instead of doing ([^/]+)(?:/(.*))?$-->
            <service_name>$3</service_name>
        </args>
    </mapping>

    <!-- admin/systemctl POST -->
    <mapping>
        <target>systemctl@libfty_rest</target>
        <method>POST</method>
        <url>^/api/v1/admin/systemctl/(.+?)$</url>
        <args>
            <operation>$1</operation>
        </args>
    </mapping>

    <!-- admin/info GET rack controller info-->
    <mapping>
        <target>info@libfty_rest</target>
        <method>GET</method>
        <url>^/api/v1/admin/info$</url>
    </mapping>


    <!-- Network configuration -->
    <mapping>
      <target>augtool@libfty_rest</target>
      <url>^/api/v1/admin/(netcfg|time).*</url>
    </mapping>
    <mapping>
      <target>netcfg@libfty_rest</target>
      <url>^/api/v1/admin/netcfgs$</url>
      <method>GET</method>
    </mapping>
    <mapping>
      <target>netcfg@libfty_rest</target>
      <url>^/api/v1/admin/netcfg/(.*)$</url>
      <method>(GET|PUT)</method>
      <args>
        <iface>$1</iface>
      </args>
    </mapping>
    <mapping>
      <target>admin_ifaces@libfty_rest</target>
      <url>^/api/v1/admin/ifaces$</url>
    </mapping>
    <mapping>
      <target>admin_iface@libfty_rest</target>
      <url>^/api/v1/admin/iface/(.*)$</url>
      <method>GET</method>
      <args>
        <iface>$1</iface>
      </args>
    </mapping>

    <!-- Time settings -->
    <mapping>
      <target>time@libfty_rest</target>
      <method>(GET|POST)</method>
      <url>^/api/v1/admin/time.*$</url>
    </mapping>

    <!-- Change password -->
    <mapping>
      <target>admin_passwd@libfty_rest</target>
      <url>^/api/v1/admin/passwd(/)?</url>
      <method>POST</method>
    </mapping>

    <!-- Asset management -->
    <!-- list of asset by container -->
    <mapping>
      <target>assets_in@libfty_rest</target>
      <url>^/api/v1/assets$</url>
    </mapping>

    <mapping>
      <target>asset_list@libfty_rest</target>
      <url>^/api/v1/asset/(datacenter|room|row|rack|group|device)s.*$</url>
      <args>
        <type>$1</type>
      </args>
    </mapping>

    <!-- Asset import -->
    <mapping>
      <target>asset_import@libfty_rest</target>
      <url>^/api/v1/asset/import.*</url>
    </mapping>

    <!-- Asset export -->
    <mapping>
      <target>asset_export@libfty_rest</target>
      <method>GET</method>
      <url>^/api/v1/asset/export.*</url>
    </mapping>

    <!--
         Asset GET
         XXX: This needs to be last position as this regexp matches all possible
              asset API, like /asset/import!!!
         -->
    <mapping>
      <target>asset_GET@libfty_rest</target>
      <url>^/api/v1/asset/?(datacenter|room|row|rack|group|device)?/?(.*)$</url>
      <method>GET</method>
      <args>
        <id>$1</id>
      </args>
    </mapping>

    <mapping>
      <target>asset_DELETE@libfty_rest</target>
      <url>^/api/v1/asset/(.*)$</url>
      <method>DELETE</method>
      <args>
        <id>$1</id>
      </args>
    </mapping>

    <mapping>
      <target>asset_PUT@libfty_rest</target>
      <url>^/api/v1/asset/(.*)$</url>
      <method>PUT</method>
      <args>
        <id>$1</id>
      </args>
    </mapping>

    <mapping>
      <target>asset_POST@libfty_rest</target>
      <url>^/api/v1/asset/?$</url>
      <method>POST</method>
    </mapping>

    <!-- admin/myuser GET
        to distinguish user's profile before login wizard runs
        this MUST be allowed before license is accepted
    -->
    <mapping>
      <target>my_profile@libfty_rest</target>
      <method>GET</method>
      <url>^/api/v1/admin/myuser$</url>
    </mapping>

    <!-- admin/myuser PUT -->
    <mapping>
      <target>my_profile@libfty_rest</target>
      <method>PUT</method>
      <url>^/api/v1/admin/myuser$</url>
    </mapping>

    <!-- License management -->
    <mapping>
      <target>license_text@libfty_rest</target>
      <url>^/api/v1/admin/license$</url>
      <method>GET</method>
    </mapping>

    <mapping>
      <target>license_POST@libfty_rest</target>
      <url>^/api/v1/admin/license$</url>
      <method>POST</method>
    </mapping>

    <mapping>
      <target>license_status@libfty_rest</target>
      <url>^/api/v1/admin/license/status$</url>
      <method>GET</method>
    </mapping>

    <mapping>
      <target>license@libfty_rest</target>
      <url>^/api/v1/.*</url>
    </mapping>
    <!-- API itself -->

    <!-- Enforce processing of supported extensions by using this order: -->
    <!-- Download as... (attachment with a filename) -->
    <mapping>
      <target>getlog_GET@libfty_rest</target>
      <url>^/api/v1/admin/getlog/(.*)\.(gz|txt)$</url>
      <method>GET</method>
      <args>
        <logname_base>$1</logname_base>
        <logname_ext>.$2</logname_ext>
      </args>
    </mapping>

    <!-- List supported lognames and extensions at the base URL -->
    <mapping>
      <target>getlog_GET@libfty_rest</target>
      <url>^/api/v1/admin/getlog$</url>
      <method>GET</method>
      <args>
        <list_lognames>yes</list_lognames>
      </args>
    </mapping>

    <!-- Display log raw in the browser -->
    <mapping>
      <target>getlog_GET@libfty_rest</target>
      <url>^/api/v1/admin/getlog/(.*)$</url>
      <method>GET</method>
      <args>
        <logname_base>$1</logname_base>
        <logname_ext></logname_ext>
      </args>
    </mapping>

    <mapping>
      <target>topology_location_from2@libfty_rest</target>
      <url>^/api/v1/topology/location.*$</url>
      <method>GET</method>
    </mapping>

    <!-- topology/location -->
    <mapping>
      <target>topology_location_from@libfty_rest</target>
      <url>^/api/v1/topology/location.*$</url>
      <method>GET</method>
    </mapping>

    <mapping>
      <target>topology_location_to@libfty_rest</target>
      <url>^/api/v1/topology/location.*$</url>
      <method>GET</method>
    </mapping>

    <!-- topology/power -->
    <mapping>
      <target>topology_power@libfty_rest</target>
      <url>^/api/v1/topology/power.*$</url>
      <method>GET</method>
    </mapping>

    <!-- Get input power chain -->
    <mapping>
      <target>input_power_chain@libfty_rest</target>
      <method>GET</method>
      <url>^/api/v1/topology/input_power_chain/(.+)$</url>
      <args>
        <id>$1</id>
      </args>
    </mapping>

    <!-- Current meassurements -->
    <mapping>
      <target>current@libfty_rest</target>
      <url>^/api/v1/metric/current.*$</url>
      <method>GET</method>
    </mapping>

    <!-- rack consumption -->
    <mapping>
      <target>rack_total@libfty_rest</target>
      <method>GET</method>
      <url>^/api/v1/metric/computed/rack_total.*$</url>
    </mapping>

    <!-- datacenter indicators -->
    <mapping>
      <target>datacenter_indicators@libfty_rest</target>
      <url>^/api/v1/metric/computed/datacenter_indicators.*$</url>
      <method>GET</method>
    </mapping>

    <!-- uptime -->
    <mapping>
      <target>uptime@libfty_rest</target>
      <url>^/api/v1/metric/computed/uptime.*$</url>
    </mapping>

    <!-- Make sure we have malamute connection -->
    <!-- Currently doesn't work, needs to be debugged
    <mapping>
      <target>agent@libfty_rest</target>
    </mapping> -->

    <!-- Average GET -->
    <mapping>
      <target>average@libfty_rest</target>
      <method>GET</method>
      <url>^/api/v1/metric/computed/average/csv.*$</url>
      <args>
        <csv>yes</csv>
      </args>
    </mapping>

    <mapping>
      <target>average@libfty_rest</target>
      <method>GET</method>
      <url>^/api/v1/metric/computed/average.*$</url>
      <args>
        <csv>no</csv>
      </args>
    </mapping>

    <!-- admin/config -->
    <mapping>
        <target>config@libfty_rest</target>
        <url>^/api/v1/admin/config.*$</url>
    </mapping>

    <!-- POST admin/scan -->
    <mapping>
      <target>scan_run@libfty_rest</target>
      <url>^/api/v1/admin/scan.*$</url>
      <method>POST</method>
    </mapping>

    <!-- GET admin/scan -->
    <mapping>
      <target>scan_progress@libfty_rest</target>
      <url>^/api/v1/admin/scan.*$</url>
      <method>GET</method>
    </mapping>

    <!-- DELETE admin/scan -->
    <mapping>
        <target>scan_run@libfty_rest</target>
        <url>^/api/v1/admin/scan.*$</url>
        <method>DELETE</method>
    </mapping>

    <!-- POST admin/confscan -->
    <mapping>
      <target>conf_scan@libfty_rest</target>
      <url>^/api/v1/admin/confscan.*$</url>
      <method>POST</method>
    </mapping>

    <!-- GET admin/confscan -->
    <mapping>
      <target>conf_scan@libfty_rest</target>
      <url>^/api/v1/admin/confscan.*$</url>
      <method>GET</method>
    </mapping>

    <!-- GET admin/gpio -->
    <mapping>
        <method>GET</method>
        <target>list_gpio@libfty_rest</target>
        <url>^/api/v1/admin/gpio$</url>
    </mapping>

    <!-- POST admin/gpio -->
    <mapping>
        <method>POST</method>
        <target>add_gpio@libfty_rest</target>
        <url>^/api/v1/admin/gpio/?$</url>
    </mapping>

    <!-- POST admin/gpo -->
    <mapping>
        <method>POST</method>
        <target>gpo_action@libfty_rest</target>
        <url>^/api/v1/admin/gpo</url>
        <args>
            <sensor>$1</sensor>
            <action>$2</action>
         </args>
    </mapping>

    <!-- GET admin/hw_capability -->
    <mapping>
      <target>hw_capability@libfty_rest</target>
      <url>^/api/v1/admin/hw_capability/(.*)$</url>
      <method>GET</method>
      <args>
        <id>$1</id>
      </args>
    </mapping>

    <!-- POST admin/email/test -->
    <mapping>
        <target>email_test@libfty_rest</target>
        <url>^/api/v1/admin/email[/_]test.*$</url>
	<method>POST</method>
    </mapping>

    <!-- POST admin/email/feedback -->
    <mapping>
        <target>email_feedback@libfty_rest</target>
        <url>^/api/v1/admin/email/feedback.*$</url>
        <method>POST</method>
    </mapping>

    <!-- POST admin/email/cpre -->
    <mapping>
        <target>email_vote@libfty_rest</target>
        <url>^/api/v1/admin/email/vote.*$</url>
        <method>POST</method>
    </mapping>

    <!-- not found error  -->
    <mapping>
        <target>not_found@libfty_rest</target>
        <url>^/api/v1/*.*$</url>
    </mapping>


  </mappings>

  <!-- listen to a port (empty string means any local interface) -->
  <listeners>
    <listener>
      <port>8000</port>
    </listener>
  <!-- a certificate enables ssl -->
  <!-- ssl start
    <listener>
      <port>8443</port>
      <certificate>/etc/tntnet/bios.pem</certificate>
    </listener>
   ssl end -->
  </listeners>

  <logging>
    <rootlogger>INFO</rootlogger>

    <loggers>
      <logger>
        <category>tntnet</category>
        <level>INFO</level>
      </logger>
      <logger>
        <category>component.libfty_rest-web</category>
        <level>INFO</level>
      </logger>
    </loggers>

    <!--
    <file>tntnet.log</file>
    <maxfilesize>10M</maxfilesize>
    <maxbackupindex>2</maxbackupindex>
    -->

  </logging>

  <!-- <maxRequestSize>65536</maxRequestSize> -->
  <!-- <maxRequestTime>600</maxRequestTime> -->
  <!-- <user>tntnet</user> -->
  <allUserGroups>yes</allUserGroups>
  <!-- <group>tntnet</group> -->
  <!-- <dir>/</dir> -->
  <!-- <documentRoot>/var/www</documentRoot> -->
  <!-- <chrootdir>/var/safedir</chrootdir> -->
  <!-- <pidfile>/var/run/tntnet.pid</pidfile> -->
  <!-- <daemon>0</daemon> -->
  <!-- <minThreads>5</minThreads> -->
  <!-- <maxThreads>100</maxThreads> -->
  <!-- <threadStartDelay>10</threadStartDelay> -->
  <!-- <queueSize>1000</queueSize> -->
  <!--
  <compPath>
    <entry>path1</entry>
    <entry>path2</entry>
  </compPath>
   -->
  <!-- <bufferSize>16384</bufferSize> -->
  <!-- <socketReadTimeout>10</socketReadTimeout> -->
  <!-- <socketWriteTimeout>10000</socketWriteTimeout> -->
  <!-- <keepAliveTimeout>15000</keepAliveTimeout> -->
  <!-- <keepAliveMax>1000</keepAliveMax> -->
  <!-- <sessionTimeout>300</sessionTimeout> -->
  <!-- <listenBacklog>64</listenBacklog> -->
  <!-- <listenRetry>5</listenRetry> -->
  <!-- <enableCompression>no</enableCompression> -->
  <!-- <mimeDb>/etc/mime.types</mimeDb> -->
  <!-- <minCompressSize>1024</minCompressSize> -->
  <!-- <maxUrlMapCache>8192</maxUrlMapCache> -->
  <!-- <defaultContentType>text/html; charset=UTF-8</defaultContentType> -->
  <!-- <accessLog>/var/log/tntnet/access.log</accessLog> -->
  <!-- <errorLog>/var/log/tntnet/error.log</errorLog> -->
  <!-- <maxBackgroundTasks>5</maxBackgroundTasks> -->
  <!-- <sslProtocols></sslProtocols> -->
  <!-- <sslCipherList></sslCipherList> -->

</tntnet>
