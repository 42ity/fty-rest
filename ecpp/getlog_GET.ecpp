<#
 #
 # Copyright (C) 2016 - 2020 Eaton
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 2 of the License, or
 # (at your option) any later version.
 #
 # This program is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License along
 # with this program; if not, write to the Free Software Foundation, Inc.,
 # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 #
 #><#
/*!
 * \file    getlog_GET.ecpp
 * \author  Jim Klimov <EvgenyKlimov@Eaton.com>
 * \brief   This REST API call returns logfile contents (optionally compressed)
 */
 #><%pre>
#include <vector>
#include <string>
#include <iostream>
#include <fstream>
#include <stdexcept>
#include <sys/utsname.h>
#include <time.h>
#include <tnt/mimedb.h>
#include <fty_common_rest_helpers.h>
#include <fty_common_macros.h>
#include <fty_common_json.h>
#include <cxxtools/serializationinfo.h>
#include "shared/utils.h"

// For debugging server credentials in error-reports below
#include "grp.h"
#include "pwd.h"

// For checking the systemd journal directory
#include <dirent.h>
#include <errno.h>

// Code snatched and adapted from TNTNET source codebase including :
// tntnet-sources/framework/common/httpreply.cpp
// and tntnet-sources/framework/common/tnt/cstream.h
// and tntnet-sources/framework/common/cstream.cpp
// ... perhaps it all should be better exposed in the upstream project.
// For now it is renamed to avoid conflicts, and log_debug()s are away...

#include <tnt/deflatestream.h>

class _clonedcode_cstreambuf : public std::streambuf
{
    typedef std::vector<char*> _chunks_type;
    unsigned _chunksize;
    _chunks_type _chunks;

  public:
    typedef _chunks_type::size_type size_type;

    explicit _clonedcode_cstreambuf(unsigned chunksize = 32768)
    : _chunksize(chunksize)
    { }

    ~_clonedcode_cstreambuf();

    size_type chunkcount() const
    { return _chunks.size(); }

    size_type size() const
    { return _chunks.size() == 0 ? 0
           : size_t((_chunks.size() - 1) * _chunksize + pptr() - _chunks.back()); }

    size_type chunksize(size_type n) const
    {
      return _chunks.size() == 0 ? 0
           : n + 1  < _chunks.size() ? _chunksize
           : n + 1 == _chunks.size() ? static_cast<size_type>(pptr() - _chunks.back())
           : 0;
    }

    const char* chunk(size_type n) const
    { return _chunks[n]; }

    void rollback(size_type n);

    void makeEmpty();

  private:
    std::streambuf::int_type overflow(std::streambuf::int_type ch);
    std::streambuf::int_type underflow();
    int sync();
};

class _clonedcode_ocstream : public std::ostream
{
    _clonedcode_cstreambuf _streambuf;

  public:
    typedef _clonedcode_cstreambuf::size_type size_type;

    explicit _clonedcode_ocstream(unsigned chunksize = 32768)
      : std::ostream(0),
        _streambuf(chunksize)
    {
      init(&_streambuf);
    }

    size_type chunkcount() const
    { return _streambuf.chunkcount(); }

    const char* chunk(size_type n) const
    { return _streambuf.chunk(n); }

    size_type chunksize(size_type n) const
    { return _streambuf.chunksize(n); }

    size_type size() const
    { return _streambuf.size(); }

    void rollback(size_type n)
    { _streambuf.rollback(n); }

    void makeEmpty()
    { _streambuf.makeEmpty(); }

    std::string str() const;

    void output(std::ostream& out) const;
};

_clonedcode_cstreambuf::~_clonedcode_cstreambuf()
{
//  log_debug(static_cast<const void*>(this) << " delete " << _chunks.size() << " chunks (dtor)");
  for (size_type n = 0; n < _chunks.size(); ++n)
    delete[] _chunks[n];
}

void _clonedcode_cstreambuf::makeEmpty()
{
//  log_debug(static_cast<const void*>(this) << " makeEmpty; " << _chunks.size() << " chunks");

  if (_chunks.size() > 0)
  {
    if (_chunks.size() > 1)
    {
      for (size_type n = 1; n < _chunks.size(); ++n)
      {
//        log_debug(static_cast<const void*>(this) << " delete chunk " << n);
        delete[] _chunks[n];
      }
      _chunks.resize(1);
    }

    setp(_chunks[0], _chunks[0] + _chunksize);
  }
}

std::streambuf::int_type _clonedcode_cstreambuf::overflow(std::streambuf::int_type ch)
{
  char* chunk = new char[_chunksize];
//  log_debug(static_cast<const void*>(this) << " new chunk " << static_cast<const void*>(chunk));
  _chunks.push_back(chunk);
  setp(_chunks.back(), _chunks.back() + _chunksize);

  if (ch != traits_type::eof())
    sputc(traits_type::to_char_type(ch));

  return 0;
}

std::streambuf::int_type _clonedcode_cstreambuf::underflow()
{
  return traits_type::eof();
}

int _clonedcode_cstreambuf::sync()
{
  return 0;
}

void _clonedcode_cstreambuf::rollback(size_type n)
{
  if (n == 0)
  {
    makeEmpty();
  }
  else
  {
    size_type c = (n-1) / _chunksize;

    for (size_type cc = c + 1; cc < _chunks.size(); ++cc)
    {
//      log_debug(static_cast<const void*>(this) << " delete chunk " << cc);
      delete[] _chunks[cc];
    }

    _chunks.resize(c + 1);

    setp(_chunks[c], _chunks[c] + _chunksize);
    pbump(int(n % _chunksize));
  }
}

std::string _clonedcode_ocstream::str() const
{
  std::string ret;
  ret.reserve(size());
  for (unsigned n = 0; n < chunkcount(); ++n)
    ret.append(chunk(n), chunksize(n));
  return ret;
}

void _clonedcode_ocstream::output(std::ostream& _out) const
{
  for (unsigned n = 0; n < chunkcount(); ++n)
    _out.write(chunk(n), std::streamsize(chunksize(n)));
}

class _clonedcode_Compressor
{
        _clonedcode_ocstream _zbody;
        tnt::DeflateStream _deflator;
        uLong _crc;
        unsigned _size;

      public:
        _clonedcode_Compressor()
          : _deflator(_zbody),
            _crc(0),
            _size(0)
        {
        }

        void init()
        {
          static const char f[] =
               "\x1f\x8b\x08\x00"
               "\x00\x00\x00\x00"
               "\x04\x03";
          _zbody.write(f, sizeof(f) - 1);
        }

        void compress(const char* d, unsigned s)
        {
          _deflator.write(d, s);
          _size += s;
          _crc = crc32(_crc, reinterpret_cast<const Bytef*>(d), s);
        }

        void finalize()
        {
          _deflator.end();

          uint32_t u = uint32_t(_crc);
          _zbody.put(static_cast<char>(u & 0xFF));
          _zbody.put(static_cast<char>((u >>= 8) & 0xFF));
          _zbody.put(static_cast<char>((u >>= 8) & 0xFF));
          _zbody.put(static_cast<char>((u >>= 8) & 0xFF));

          u = _size;
          _zbody.put(static_cast<char>(u & 0xFF));
          _zbody.put(static_cast<char>((u >>= 8) & 0xFF));
          _zbody.put(static_cast<char>((u >>= 8) & 0xFF));
          _zbody.put(static_cast<char>((u >>= 8) & 0xFF));
        }

        std::string::size_type uncompressedSize()
        { return _size; }

        std::string::size_type zsize()
        { return _zbody.size(); }

        std::string str() const
        { return _zbody.str(); }

        void output(std::ostream& out)
        { _zbody.output(out); }

        void clear()
        {
          _zbody.makeEmpty();
          // This is in newer codebase : _deflator.reinitialize(); which does "deflateReset(&_stream)"
          _crc = 0;
          _size = 0;
        }
}; // class _clonedcode_Compressor

// build baseName prefixed unamed & timestamped filename
std::string build_content_filename(const std::string& baseName)
{
    std::string content_filename = baseName;

    struct utsname u;
    if (uname (&u) == -1) {
        log_error ("uname() failed: '%s'", strerror (errno));
    }
    else {
        content_filename.append("_").append(u.nodename);
    }

    time_t t = time(NULL);
    if ( t == time_t(-1)) {
        log_error ("time(NULL) failed: '%s'", strerror (errno));
    }
    else {
        // ASSUMPTION: time_t is an integer type (usually is long int)
        // or otherwise can convert to std::string
        char buf[21] = {0x00};
        int r = calendar_to_datetime(time(NULL), buf, 21);
        if (r != 0) {
            log_error ("Failed to convert timestamp");
        }
        else {
            // replace colons ':' by dash '-' for our Windows users,
            // prevents http://latkin.org/blog/2016/07/20/
            //      git-for-windows-accidentally-creates-ntfs-alternate-data-streams/
            for (char* c = strchr(buf, ':'); c != NULL; c = strchr(c, ':'))
                { *c = '-'; c++; }

            content_filename.append("_").append(buf);
        }
    }

    return content_filename;
}

// journald logs export to logfile
int exec_journalctl_command (const std::string& logfile, bool truncate = true, bool extensive = false)
{
    // 'www-data' user must be part of the 'systemd-journal' group, to let journalctl access journald files (see fty-core)
    // usermod -a -G systemd-journal www-data
    // avoid using 42ty wrapper (/usr/libexec/bios/journalctl) by calling the real version from /bin

    // IPCs do not store journal on flash to avoid its wear, so here we
    // pick one of two possible locations expected for the bundled product.
    // No fatal deal if the chosen one is empty or missing => HTTP-500.
    std::string dirname = "/var/log/journal";
    DIR* dirobj = opendir(dirname.c_str());
    if (dirobj) {
        closedir(dirobj);
    }
    else if (ENOENT == errno) {
        // Missing first choice, sort of expected, nothing to log
        dirname = "/run/log/journal";
    }
    else {
        log_debug("Failed to access '%s/' which seems to exist, will try another");
        dirname = "/run/log/journal";
    }

    std::string cmd = "/bin/journalctl -D " + dirname + " --no-pager -l";
    if (extensive) {
        cmd.append(" -x");
    }
    else {
        cmd.append(" -o cat"); // shorter output mode
    }
    if (truncate) {
        cmd.append(" --since \"3 hours ago\" --until \"now\"");
    }
    cmd.append(" > ").append(logfile);

    log_debug("running journalctl command to generate %s", logfile.c_str());
    int r = system(cmd.c_str());
    if (r != 0) log_error("journalctl command returns %d ", r);
    else log_debug("journalctl command returns %d ", r);

    return r;
}

// ps logs export to logfile
int exec_ps_command (const std::string& logfile)
{
    std::string cmd = "/bin/ps -edf > " + logfile;

    log_debug("running ps command to generate %s", logfile.c_str());
    int r = system(cmd.c_str());
    if (r != 0) log_error("ps command returns %d ", r);
    else log_debug("ps command returns %d ", r);

    return r;
}

// ip logs export to logfile
int exec_ip_command (const std::string& param, const std::string& logfile)
{
    std::stringstream ss;
    ss << "/bin/ip " << param << " > " << logfile;
    std::string cmd = ss.str();

    log_debug("running ip command to generate %s", logfile.c_str());
    int r = system(cmd.c_str());
    if (r != 0) log_error("ip command returns %d ", r);
    else log_debug("ip command returns %d ", r);

    return r;
}

// network interfaces logs export to logfile
int exec_ip_interfaces_command (const std::string& logfile)
{
    std::string cmd = "cp /etc/network/interfaces " + logfile;

    log_debug("copy network interfaces to %s", logfile.c_str());
    int r = system(cmd.c_str());
    if (r != 0) log_error("copy network interfaces command returns %d ", r);
    else log_debug("copy network interfaces command returns %d ", r);

    return r;
}

// curl http req. export to logfile
int exec_curl_command (const std::string& method, const std::string& url, const std::string& logfile)
{
    //std::string cmd = "/usr/bin/curl -sS -k -X " + method + " " + url + " > " + logfile + " 2>&1";
    std::string cmd = "/usr/bin/curl -sS -k -o " + logfile + " -X " + method + " " + url;

    log_debug("running curl command to generate %s", logfile.c_str());
    int r = system(cmd.c_str());
    if (r != 0) log_error("curl command returns %d ", r);
    else log_debug("curl command returns %d ", r);

    return r;
}

// basename log. export to logfile
// see logsData[] below for basename identifiers
// return 0 if success, <0 else (errMsg is set)
int process_basename_export (const std::string& basename, const std::string& logfile, std::string& errMsg)
{
    errMsg.clear();

    if (logfile.empty()) {
        errMsg = "logfile is empty (basename: " + basename + ")";
        return -1;
    }
    // pre cleanup
    remove(logfile.c_str());

    if (basename == "processes") {
        // build logfile using ps export
        int r = exec_ps_command(logfile);
        if (r != 0) {
            errMsg = "ps command has failed (basename: " + basename + ")";
            return -1;
        }
    }
    else if (basename == "ip-addr") {
        // build logfile using ip addr export
        int r = exec_ip_command("addr", logfile);
        if (r != 0) {
            errMsg = "ip addr command has failed (basename: " + basename + ")";
            return -1;
        }
    }
    else if (basename == "ip-route") {
        // build logfile using ip route export
        int r = exec_ip_command("route", logfile);
        if (r != 0) {
            errMsg = "ip addr command has failed (basename: " + basename + ")";
            return -1;
        }
    }
    else if (basename == "ip-interfaces") {
        // build logfile using network interfaces configuration
        int r = exec_ip_interfaces_command(logfile);
        if (r != 0) {
            errMsg = "interfaces command has failed (basename: " + basename + ")";
            return -1;
        }
    }
    else if ((basename == "journald-3h")
        || (basename == "journald-all")) {
        // build logfile using journalctl export truncated for last 3hrs
        // or not truncated (journald-all)
        int r = -1;
        if (basename == "journald-3h")
            { r = exec_journalctl_command(logfile); }
        else // journald-all
            { r = exec_journalctl_command(logfile, false, true); }
        if (r != 0) {
            errMsg = "journalctl command has failed (basename: " + basename + ")";
            return -1;
        }
    }
    else if ((basename == "emc4j-bundle")
            || (basename == "emc4j-jdbc")
            || (basename == "emc4j-http")) {
        //emc4j/karaf urls
        const std::string KARAF("http://localhost:8181/jolokia/read/org.apache.karaf");
        const std::string EMC4J_BUNDLE(KARAF + ":type=bundle,name=root/Bundles");
        const std::string EMC4J_JDBC(KARAF + ":type=jdbc,name=root");
        const std::string EMC4J_HTTP(KARAF + ":type=http,name=root");

        std::string url;
        if (basename == "emc4j-bundle") url = EMC4J_BUNDLE;
        else if (basename == "emc4j-jdbc") url = EMC4J_JDBC;
        else url = EMC4J_HTTP; // emc4j-http

        // build logfile using curl export
        int r = exec_curl_command("GET", url, logfile);
        if (r != 0) {
            errMsg = "curl command has failed (basename: " + basename + ")";
            return -1;
        }
    }
    else {
        errMsg = "Unreferenced basename (" + basename + ")";
        return -1;
    }

    return 0;
}

</%pre>
<%request scope="global">
UserInfo user;
</%request>
<%cpp>

//#define _GETLOG_TEST_
#undef _GETLOG_TEST_
#ifdef _GETLOG_TEST_
    //debug mode & test
    #pragma message "=== _GETLOG_TEST_ defined ==="
#endif

    // permission check
    static const std::map <BiosProfile, std::string> PERMISSIONS = {
        {BiosProfile::Admin, "R"}
    };
    CHECK_USER_PERMISSIONS_OR_DIE (PERMISSIONS);

    // Note: the http_die() family does its own
    //  reply.setContentType("application/json;charset=UTF-8");
    // rituals if needed, so undecided callers like this one do not

    // archive bits def.
    enum {
        bALL = 1 << 0L, // full archive (maintenance report)
        bFCT = 1 << 1L, // functional archive (client report)
    };

    // supported (baseName, archBitmask, isLogicalFile, filePath) tuples
    struct {
        std::string baseName;
        int archBitmask; // archive membership
        bool isLogicalFile; // logical file vs. command export
        std::string filePath; // fs access
    } const logsData[] = {
    // logical logfiles
        { "www-audit",          bALL | bFCT, true,  "/var/log/app-audit/www-audit.log" },
        { "alarms-audit",       bALL | bFCT, true,  "/var/log/app-audit/alarms-audit.log" },
        { "automation-audit",   bALL | bFCT, true,  "/var/log/app-audit/automation-audit.log" },
        { "email-audit",        bALL | bFCT, true,  "/var/log/app-audit/email-audit.log" },
        { "ai-audit",           bALL | bFCT, true,  "/var/log/app-audit/ai-audit.log" },
        { "connectors-audit",   bALL | bFCT, true,  "/var/log/app-audit/connectors-audit.log" },
        { "mass-mgr-audit",     bALL | bFCT, true,  "/var/log/etn-mass-management/mass-management-audit.log" },
        { "verify-fs",          bALL | bFCT, true,  "/var/log/verify-fs.log" },
        { "emc4j-audit",        bALL,        true,  "/var/log/etn-emc4j-ipm2/karaf.log" },
        { "release",            bALL,        true,  "/etc/release-details.json" },
        { "messages",           bALL,        true,  "/var/log/messages" },
        { "firmwares",          bALL,        true,  "/var/lib/fty/etn-mass-management/settings.cfg" },
        { "timezone",           bALL,        true,  "/etc/fty/fty-timezone.cfg" },
    // cmd export to logfiles
        { "emc4j-bundle",       bALL,        false, "/tmp/etn-emc4j-bundle.log" },  // curl export
        { "emc4j-jdbc",         bALL,        false, "/tmp/etn-emc4j-jdbc.log" },
        { "emc4j-http",         bALL,        false, "/tmp/etn-emc4j-http.log" },
        { "journald-3h",        bALL,        false, "/tmp/journald-3h.log" },       // journalctl export
        { "journald-all",       bALL,        false, "/tmp/journald-all.log" },
        { "processes",          bALL,        false, "/tmp/processes.log" },         // ps export
        { "ip-addr",            bALL,        false, "/tmp/ip-addr.log" },           // network export
        { "ip-route",           bALL,        false, "/tmp/ip-route.log" },          //
        { "ip-interfaces",      bALL,        false, "/tmp/ip-interfaces.log" },     //
    // archives (archBitmask **MUST** be 0)
        { "ALL", 0, false, "/tmp/log_all.tar" }, // full archive, bALL logfiles above
        { "FCT", 0, false, "/tmp/log_fct.tar" }, // functional archive, bFCT logfiles above
    };

    // Parsed, trusted values (if populated)
    std::string baseName;
    std::string baseName_ext;
    std::string baseName_logfile;
    bool baseName_isLogicalFile = false;
    bool baseName_isArchive = false;
    bool baseName_doEncryption = false;
    int baseName_archiveBit = 0;

    try {
        // get args
        std::string in_list_lognames = request.getArg ("list_lognames");
        std::string in_logname_base = request.getArg ("logname_base");
        std::string in_logname_ext = request.getArg ("logname_ext");

#ifdef _GETLOG_TEST_
        ftylog_setVerboseMode(ftylog_getInstance());
        //in_list_lognames = "yes";
        //in_logname_base = "ALL"; //in_logname_base = "FCT"; //in_logname_base = "journald-all";
        //in_logname_ext = ".gz"; //in_logname_ext = ".txt"; //in_logname_ext = "";
#endif

        {
            std::string msg = "getlog_GET got args: logname_base='" + in_logname_base \
                + "' logname_ext='" + in_logname_ext \
                + "' list_lognames='" + in_list_lognames + "'";
            log_info("%s", msg.c_str() );
        }

        if (in_list_lognames == "yes") {
            reply.out() << "{ \"getlog-supports\": {"; // open object

            // basenames (collection)
            reply.out() << " \"logname_base\": ["; // open array
            bool first = true;
            for (auto& data : logsData) {
                if (!first) { reply.out() << ", "; } else first = false;
                reply.out() << "\"" + data.baseName + "\"";
            }
            reply.out() << "],"; // close

            // extensions (collection)
            reply.out() << " \"logname_ext\": [ \"\", \".txt\", \".gz\" ]";

            reply.out() << " }}"; // close

            log_debug("Honored an authorized request to list supported log names " \
                "and extensions, our job is done here");
            return HTTP_OK;
        }

        // check ext
        if (!(in_logname_ext.empty() || (in_logname_ext == ".txt") || (in_logname_ext == ".gz"))) {
            log_error("Authorized request to download an unsupported file extension was denied");
            std::string expected = TRANSLATE_ME ("'', '.gz' or '.txt' extension");
            http_die("request-param-bad", "extension",
                ("'" + in_logname_base + in_logname_ext + "'").c_str(), expected.c_str());
        }

        // search/check basename
        baseName.clear();
        for (auto& data : logsData) {
            if (in_logname_base != data.baseName)
                continue;

            baseName = data.baseName; // found
            baseName_ext = in_logname_ext;
            baseName_logfile = data.filePath; // full path
            baseName_isLogicalFile = data.isLogicalFile;
            baseName_isArchive = (baseName == "ALL") || (baseName == "FCT");
            baseName_doEncryption = (baseName == "ALL"); // only encrypt. full arch.

            if (baseName == "ALL") baseName_archiveBit = bALL;
            else if (baseName == "FCT") baseName_archiveBit = bFCT;
            break;
        }

        if (baseName.empty()) {
            log_error("Authorized request to download an unsupported log file was denied");
            std::string expected = TRANSLATE_ME ("'messages' optionally with '.gz' or '.txt' extension");
            http_die("request-param-bad", "logname",
                ("'" + in_logname_base + in_logname_ext + "'").c_str(), expected.c_str());
        }

        // We have a definite officially supported request, try to fulfill it
        log_debug("%s", ("Posting logfile extension '" + baseName_ext \
            + "' (MIME type '" + reply.getContentType() + "') - initial").c_str() );

        bool deleteLogfile = false; // for post cleanup

        if (baseName_isArchive) {
            // built a tar archive (unique logfile) owning a set of logfiles

            const std::string targetdir = "/tmp/IPM2-logs";
            const std::string mkdir("mkdir -p " + targetdir);
            const std::string rmdir("rm -fr " + targetdir);
            const std::string tar("/bin/tar cf " + baseName_logfile + " -C /tmp/ IPM2-logs");

            // pre cleanup
            remove(baseName_logfile.c_str());
            int r = system(rmdir.c_str());
            if (r != 0) { log_warning("%s (r: %d)", rmdir.c_str(), r); }

            // archive bit for logfiles membership
            if (baseName_archiveBit == 0) {
                std::string err = "Inconsistent logfiles membership bit for '" + baseName + "' archive.";
                log_error("%s", err.c_str());
                http_die("internal-error", err);
            }

            // build the cp command to copy logfiles in targetdir
            std::vector<std::string> temp_logfiles;
            std::string cp; // cp logfiles
            for (auto& data : logsData) {
                if ((data.archBitmask & baseName_archiveBit) == 0)
                    continue; // logfile out of archive, or archive itself

                if (!data.isLogicalFile) { // exported logfiles
                    std::string err;
                    int r1 = process_basename_export(data.baseName, data.filePath, err);
                    temp_logfiles.push_back(data.filePath);
                    if (r1 != 0) {
                        log_warning("%s", err.c_str());
                        continue; // anyway
                    }
                }

                // cp command: append only if file exist
                if (access(data.filePath.c_str(), F_OK) != -1) {
                    if (cp.empty()) cp = "cp";
                    cp.append(" ").append(data.filePath);

                    // rotated logfile exceptions
                    if (   (std::string::npos != data.filePath.find("www-audit.log"))
                        || (std::string::npos != data.filePath.find("alarms-audit.log"))
                        || (std::string::npos != data.filePath.find("automation-audit.log"))
                        || (std::string::npos != data.filePath.find("email-audit.log"))
                        || (std::string::npos != data.filePath.find("ai-audit.log"))
                        || (std::string::npos != data.filePath.find("connectors-audit.log"))
                        || (std::string::npos != data.filePath.find("mass-management-audit.log"))
                        || (std::string::npos != data.filePath.find("verify-fs.log"))
                        || (std::string::npos != data.filePath.find("karaf.log"))
                    ){
                        cp.append("*"); // cp <filePath>*
                    }
                }
            }
            if (cp.empty()) {
                log_warning("'%s' archive is empty", baseName.c_str());
            }
            else {
                cp.append(" ").append(targetdir);
            }

            // build target directory
            r = system(mkdir.c_str());
            log_debug("%s (r: %d)", mkdir.c_str(), r);
            if (r != 0) {
                for (auto& file : temp_logfiles) { remove(file.c_str()); }
                log_error ("%s failed (r: %d)", mkdir.c_str(), r);
                std::string err = "mkdir command has failed.";
                http_die( "internal-error", err.c_str ());
            }

            // copy logfiles in target dir.
            if (!cp.empty()) {
                r = system(cp.c_str());
                log_debug("%s (r: %d)", cp.c_str(), r);
                if (r != 0) {
                    log_error("cp command failed (%s)", strerror(errno));
                    r = 0; // don't die on cp error (Permission denied)
                }
                if (r != 0) { // dead code kept
                    log_error ("cp failed (r: %d, %s)", r, strerror(errno));
                    if (0 != system(rmdir.c_str())) { log_warning("'%s' failed", rmdir.c_str()); }
                    for (auto& file : temp_logfiles) { remove(file.c_str()); }
                    std::string err = "cp command has failed.";
                    http_die( "internal-error", err.c_str ());
                }
            }

            // archive target dir.
            r = system(tar.c_str());
            log_debug("%s (r: %d)", tar.c_str(), r);

            // cleanup
            if (0 != system(rmdir.c_str())) { log_warning("'%s' failed", rmdir.c_str()); }
            for (auto& file : temp_logfiles) { remove(file.c_str()); }

            if (r != 0) {
                remove(baseName_logfile.c_str());
                log_error ("%s failed (r: %d)", tar.c_str(), r);
                std::string err = "tar command has failed.";
                http_die( "internal-error", err.c_str ());
            }

            deleteLogfile = true;
            // here baseName_logfile was created (archive)
        }
        else if (!baseName_isLogicalFile) { // exported logfiles
            std::string err;
            int r = process_basename_export(baseName, baseName_logfile, err);
            if (r != 0) {
                remove(baseName_logfile.c_str());
                log_error("%s", err.c_str());
                http_die( "internal-error", err.c_str());
            }

            deleteLogfile = true;
            // here baseName_logfile was created (export)
        }

        // here baseName_logfile exist

        // encrypt logfile (optional)
        bool is7zEncrypted = false;
        if (baseName_doEncryption) {
            // get passphrase for encryption
            std::string passphrase;
            {
                const std::string path_name("/usr/share/bios/maintenance-report-conf.json");
                try {
                    cxxtools::SerializationInfo si;
                    JSON::readFromFile(path_name, si);

                    std::string version; // read but not processed
                    if (!si.getMember("version", version)) {
                        throw std::runtime_error("'version' member is missing");
                    }
                    if (!si.getMember("passphrase", passphrase)) {
                        throw std::runtime_error("'passphrase' member is missing");
                    }
                }
                catch (const std::ifstream::failure& e) {
                    log_error("Exception reading %s (%s)", path_name.c_str(), e.what());
                }
                catch (const std::exception& e) {
                    log_error("Std exception reading %s (%s)", path_name.c_str(), e.what());
                }
            }

            if (passphrase.empty()) { // fallback
                log_warning("Encryption passphrase is not set");
                log_warning("Use default encryption passphrase for basename '%s'", baseName.c_str());
                passphrase = "7z4u!";
            }
            if (passphrase.empty()) {
                if (deleteLogfile) remove(baseName_logfile.c_str());
                std::string err = "Encryption passphrase is undefined for basename '" + baseName + "'.";
                log_error("%s", err.c_str());
                http_die("internal-error", err.c_str());
            }

            // we use 7-Zip (p7zip) for encryption
            std::string crypted_logfile = baseName_logfile + ".7z";
            std::string cmd = "/usr/bin/7z a -p'" + passphrase + "' " + crypted_logfile + " " + baseName_logfile;
            int r = system(cmd.c_str());
            log_debug("7z/crypt %s (r: %d)", crypted_logfile.c_str(), r);
            if (r != 0) {
                if (deleteLogfile) remove(baseName_logfile.c_str());
                remove(crypted_logfile.c_str());
                std::string err = "7z/crypt command has failed for basename '" + baseName + "'.";
                log_error("%s", err.c_str());
                http_die( "internal-error", err.c_str ());
            }

            // new logfile (crypted)
            if (deleteLogfile) remove(baseName_logfile.c_str());
            baseName_logfile = crypted_logfile;
            deleteLogfile = true;
            is7zEncrypted = true;
        }

        // read logfile (fileContent)
        std::string fileContent;
        {
            std::ifstream in(baseName_logfile.c_str());
            if (!in) {
                if (deleteLogfile) remove(baseName_logfile.c_str());
                // This exception string is processed below to return HTTP-404 and not HTTP-500
                throw std::runtime_error(TRANSLATE_ME("Could not open requested logfile: ") + baseName_logfile);
            }
            std::ostringstream out;
            out << in.rdbuf();
            in.close();
            fileContent = out.str();
        }

        // cleanup logfile
        if (deleteLogfile) remove(baseName_logfile.c_str());

        // Reply - prepare strings for Content-Disposition: header
        // Requests with a valid extension are downloads; without - plaintext shown in browser

        const std::string replyContentDisposition = baseName_ext.empty() ? "inline" : "attachment";
        std::string replyContentFilename = build_content_filename(baseName);

        // build reply

        if (baseName_ext.empty() || (baseName_ext == ".txt")) { // plaintext
            replyContentFilename += baseName_isArchive ? ".tar" : ".txt";
            if (is7zEncrypted) replyContentFilename += ".7z";

            reply.setContentType("text/plain;charset=UTF-8"); // TODO: Is it ASCII? Check rsyslog
            reply.setHeader(tnt::httpheader::contentDisposition,
                replyContentDisposition + "; filename=\"" + replyContentFilename + "\"", true);
            reply.out() << fileContent;
        }
        else { // ".gz"
            baseName_ext = is7zEncrypted ? ".7z" : ".gz";

            replyContentFilename += baseName_isArchive ? ".tar" : ".txt";
            replyContentFilename += baseName_ext;

            if (!is7zEncrypted) { // .gz
                // compress the whole content //NOTE: compressor << ifstream?
                _clonedcode_Compressor compressor;
                compressor.init();
                compressor.compress(fileContent.data(), uint32_t(fileContent.size()));
                compressor.finalize();

#ifdef _GETLOG_TEST_
                {
                    std::ostringstream gzsize;
                    gzsize << compressor.zsize();
                    std::ostringstream msg;
                    msg << "gzipped '" << baseName << "' body " << fileContent.size() \
                        << " bytes to " << gzsize.str() << " bytes";
                    log_debug("%s", msg.str().c_str());
                }
#endif

                // replace fileContent
                fileContent = compressor.str();
                compressor.clear();
            }
            else {
                // 7z native compression
            }

            tnt::MimeDb mimeDb("/etc/mime.types");
            reply.setContentType(mimeDb.getMimetype(baseName + baseName_ext));
            reply.setHeader(tnt::httpheader::contentLength, std::to_string(fileContent.size()), true);
            reply.setHeader(tnt::httpheader::contentDisposition,
                replyContentDisposition + "; filename=\"" + replyContentFilename + "\"", true);
            reply.out() << fileContent;
        }

        fileContent.clear();

        {
            std::string msg = "Posting logfile extension '" + baseName_ext
                + "' (MIME '" + reply.getContentType() + "') in mode '"
                + reply.getHeader(tnt::httpheader::contentDisposition) + "' - done";
            log_debug("%s", msg.c_str());
        }

        return HTTP_OK;
    }
    catch (const std::exception& e) {
        // NOTE: In case of errors, this may conflict with Content-Type header
        // value set above; we ASSUME this has negligible probability as we set
        // it in the end.

        {   // More debug, copied from `man getgrouplist` samples and my tntnet patch
            gid_t curgid = getgid();
            gid_t curegid = getegid();
            uid_t curuid = getuid();
            uid_t cureuid = geteuid();

            std::string msg = "Current webserver runs as: UID=" + std::to_string(curuid) +
                " (EUID=" + std::to_string(cureuid) + "), " +
                " GID=" + std::to_string(curgid) +
                " (EGID=" + std::to_string(curegid) + ")";
            log_debug("%s", msg.c_str());

            int ngroups = getgroups(0, NULL);
            msg = "Can not report about supplementary groups at the moment";
            msg += ": getgroups() returned ";
            msg += std::to_string(ngroups);
            if (ngroups > 0) {
                gid_t *groups = static_cast<gid_t*>(malloc(size_t(ngroups) * sizeof(gid_t)));
                if (groups != NULL) {
                    ngroups = getgroups(ngroups, groups);
                    if (ngroups > 0) {
                        msg = "Supplementary Groups (";
                        msg += std::to_string(ngroups);
                        msg += " total): [ ";

                        for (int j = 0; j < ngroups; j++) {
                            if (j > 0) msg += ", ";
                            msg += std::to_string(groups[j]);

                            struct group *gr = getgrgid(groups[j]);
                            if (gr != NULL) {
                                msg += " (" + std::string(gr->gr_name) + ")";
                            }
                        }
                        msg += "]";
                    }
                    else {
                        msg += " but second getgroups() failed and returned ";
                        msg += std::to_string(ngroups);
                    }
                    free (groups);
                }
                else {
                    msg += " but malloc() failed";
                }
            }
            log_debug("%s", msg.c_str());

            msg = "Exception caught: " + std::string(e.what ());
            log_error("%s", msg.c_str ());
        }

        reply.resetContent();

        // TODO: Use (define?) a dedicated exception class; maybe employ bios_throw
        if (baseName_isLogicalFile && std::string{e.what()}.find( TRANSLATE_ME("Could not open requested logfile: ") ) != std::string::npos) {
            http_die("not-found", baseName.c_str());
        }
        else {
            std::string err = TRANSLATE_ME("Exception caught. Please check logs for more details.");
            http_die("internal-error", err.c_str ());
        }
    }

    // normally never reached
    std::string err = TRANSLATE_ME("Unexpected ending.");
    http_die("internal-error", err.c_str ());
</%cpp>
