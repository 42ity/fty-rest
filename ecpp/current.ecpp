<#
 #
 # Copyright (C) 2015 - 2020 Eaton
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 2 of the License, or
 # (at your option) any later version.
 #
 # This program is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License along
 # with this program; if not, write to the Free Software Foundation, Inc.,
 # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 #
 #><#
 #><%pre>
#include <cxxtools/split.h>
#include <cxxtools/regex.h>
#include <cxxtools/jsonserializer.h>
#include <stdlib.h>
#include <vector>
#include <map>
#include <string>
#include <cmath>
#include <sys/types.h>

#include <fty_common_rest_helpers.h>
#include <fty_common_db_dbpath.h>
#include <fty_common_db_asset.h>
#include <fty_common_asset_types.h>
#include <fty_common_macros.h>
#include <fty_proto.h>
#include <fty_shm.h>

#include "shared/upsstatus.h"
#include "shared/data.h"

static std::string s_os2string(double d)
{
    // This is a hack for gdn project - if the key is operatingStatus, the value is
    // converted from number to string using this map
    static std::map<int, std::string> OS2STRING {
        {0, "Unknown"},
        {1, "None"},
        {2, "Servicing"},
        {3, "Starting"},
        {4, "Stopping"},
        {5, "Stopped"},
        {6, "Aborted"},
        {7, "Dormant"},
        {8, "Completed"},
        {9, "Migrating"},
        {10, "Immigrating"},
        {11, "Emigrating"},
        {12, "Snapshotting"},
        {13, "In_Test"},
        {14, "Transitioning"},
        {15, "In_Service"}
    };

    int os = int(d); // measurements are received as double
    if (OS2STRING.count(os) == 0)
        os = 0;
    return OS2STRING.at(os);
}

struct OutletProperties {
    double power;
    double realpower;
    double current;
    double voltage;
    std::string status;

    OutletProperties ():
        power (NAN),
        realpower (NAN),
        current (NAN),
        voltage (NAN),
        status {}
    {};

    void put (const std::string &key, double value) {
        if (key == "power")
            power = value;
        else
        if (key == "realpower")
            realpower = value;
        else
        if (key == "current")
            current = value;
        else
        if (key == "voltage")
            voltage = value;
        else
        if (key == "status")
            status = (value == 42) ? "on" : "off";
    }

    std::string toJson () const {
        std::string ret = "{";
        ret += utils::json::jsonify ("power", power);
        ret += ", ";
        ret += utils::json::jsonify ("realpower", realpower);
        ret += ", ";
        ret += utils::json::jsonify ("current", current);
        ret += ", ";
        ret += utils::json::jsonify ("voltage", voltage);
        ret += ", \"status\" : ";
        if (status.empty ())
            ret += "null";
        else
            ret += "\"" + status + "\"";
        ret += "}";
        return ret;
    }

};
</%pre>

<%request scope="global">
UserInfo user;
bool database_ready;
</%request>

<%cpp>
    // verify server is ready
    if (!database_ready) {
        log_debug ("Database is not ready yet.");
        std::string err =  TRANSLATE_ME ("Database is not ready yet, please try again after a while.");
        http_die ("internal-error", err.c_str ());
    }

    // check user permissions
    static const std::map <BiosProfile, std::string> PERMISSIONS = {
            {BiosProfile::Dashboard, "R"},
            {BiosProfile::Admin,     "R"}
            };
    CHECK_USER_PERMISSIONS_OR_DIE (PERMISSIONS);


    // checked parameters
    std::vector<uint32_t> asset_ids;
    {
        std::string dev = qparam.param("dev");
        log_debug ("Request parameters - Initial tainted values received:\n\tdev = '%s'\n",
                    dev.c_str ());

        if (dev.empty()) {
            http_die("request-param-required", "dev");
        }

        std::vector<std::string> aux;
        cxxtools::split(",", dev, std::back_inserter(aux));
        for (auto asset_id : aux ) {
            http_errors_t errors;
            uint32_t id = 0;
            if (!check_element_identifier ("dev", asset_id, id, errors)) {
                http_die_error (errors);
            }
            asset_ids.push_back(id);
        }
    }

    if (asset_ids.empty()) {
        http_die("request-param-required", "dev");
    }

    // Temporary add connection here
    tntdb::Connection conn;
    try {
        conn = tntdb::connect(DBConn::url);
    }
    catch (const std::exception &e)
    {
        LOG_END_ABNORMAL(e);
        std::string err =  TRANSLATE_ME ("Cannot connect to the database");
        http_die("internal-error", err.c_str ());
    }

    // Go through all passed ids
    cxxtools::SerializationInfo siRoot;
    cxxtools::SerializationInfo& siCurrent = siRoot.addMember("current");
    siCurrent.setCategory(cxxtools::SerializationInfo::Category::Array);

    for (auto asset_id : asset_ids)
    {
        // check if the element really exists, read its name
        auto asset = DBAssets::select_asset_element_web_byId (conn, asset_id);
        if ( asset.status == 0 && asset.errsubtype == DB_ERROR_NOTFOUND)
        {
            log_warning("Element id '%" PRIu32 "' is not in DB, skipping", asset_id);
            continue;
        }
        if ( asset.status == 0 && asset.errsubtype == DB_ERROR_INTERNAL) {
            std::string err =  TRANSLATE_ME ("Database failure");
            http_die ("internal-error", err.c_str ());
        }

        // <quantity, value> maps
        std::map <std::string, double> measurements{}; // for values of type float
        std::map <std::string, std::string> str_measurements{}; // for values of type string
        {
            fty::shm::shmMetrics metrics;

            if (fty::shm::read_metrics(asset.item.name, ".*", metrics) != 0) {
                log_warning ("Error reply for device '%s'", asset.item.name.c_str ());
                continue;
            }
            if (metrics.size() == 0) {
                continue;
            }

            // list of quantity that must be serialized as string
            const std::vector<std::string> strQuantities{
                "status.battery",
                "status.battery.charger",
                "battery.alarm.code",
                "power.status"
            };

            for (auto &metric : metrics) {
                std::string quantity{fty_proto_type(metric)};
                std::string value{fty_proto_value(metric)};

                // Prior treatment for quantities with string values
                if (std::find(strQuantities.begin(), strQuantities.end(), quantity) != strQuantities.end()) {
                    // save pair in str map
                    str_measurements.emplace(std::make_pair(quantity, value));
                    continue;
                }

                // Fallback treatment (assume float value)
                try {
                    // save pair in float map
                    double dvalue = std::stod(value);
                    measurements.emplace(std::make_pair(quantity, dvalue));
                }
                catch (const std::exception& e) {
                    log_error ("%s@%s value does not encode a float ('%s'). Defaulting to 0.",
                        quantity.c_str(), asset.item.name.c_str(), value.c_str());
                    // std::stod has failed, default is 0
                    measurements.emplace(std::make_pair(quantity, 0.0));
                }
            }
        }

        // add mandatory keys if not in DB
        if (persist::is_rack(asset.item.type_id) || persist::is_dc(asset.item.type_id) ) {
            for (const auto& key : {"realpower.default", "realpower.output.L1"}) {
                if (measurements.count(key) != 0)
                    continue;
                measurements.emplace(key, NAN);
            }
        }
        else if (persist::is_ups(asset.item.subtype_id)) {
            for (const auto& key : {"status.ups", "load.default", "realpower.default", "voltage.output.L1-N", "realpower.output.L1", "current.output.L1", "charge.battery", "runtime.battery"}) {
                if (measurements.count(key) != 0)
                    continue;
                measurements.emplace(key, NAN);
            }
        }
        else if (persist::is_pdu(asset.item.subtype_id) || persist::is_epdu(asset.item.subtype_id)) {
            for (const auto& key : {"frequency.input", "load.input.L1", "voltage.input.L1-N", "current.input.L1", "realpower.default", "realpower.input.L1", "power.default", "power.input.L1"}) {
                if (measurements.count(key) != 0)
                    continue;
                measurements.emplace(key, NAN);
            }
        }

        std::pair<std::string,std::string> asset_names = DBAssets::id_to_name_ext_name (asset_id);
        if (asset_names.first.empty() && asset_names.second.empty()) {
            std::string err =  TRANSLATE_ME ("Database failure");
            http_die ("internal-error", err.c_str ());
        }

        // we are here -> everything is ok, need just to form
        // this is a small JSON for just ONE asset

        cxxtools::SerializationInfo& siJson = siCurrent.addMember("");
        siJson.addMember("id") <<= asset.item.name;
        siJson.addMember("name") <<= asset_names.second;

        const cxxtools::Regex outlet_properties_re{"(power|realpower|current|voltage|status).(outlet).([0-9]+)"};
        std::map <std::string, OutletProperties> outlet_properties;

        // treatments of float values
        for (const auto &one_measurement : measurements)
        {
            // BIOS-951 -- begin
            cxxtools::RegexSMatch s;
            if ( (persist::is_epdu (asset.item.subtype_id) || persist::is_ups (asset.item.subtype_id))
                && outlet_properties_re.match (one_measurement.first, s)) {

                if (outlet_properties.count (s.get (3)) == 0)
                    outlet_properties [s.get (3)] = OutletProperties {};

                outlet_properties [s.get (3)].put (s.get (1), one_measurement.second);
                continue;
            }
            // BIOS-951 -- end

            if (one_measurement.first == "status.ups") {
                siJson.addMember(one_measurement.first) <<= shared::upsstatus_to_string(uint16_t(one_measurement.second));
            }
            else if (one_measurement.first == "operatingStatus") {
                siJson.addMember(one_measurement.first) <<= s_os2string(one_measurement.second);
            }
            else {
                siJson.addMember(one_measurement.first) <<= one_measurement.second;
            }
        }

        // treatment of string values
        for (const auto &one_measurement : str_measurements)
        {
            siJson.addMember(one_measurement.first) <<= one_measurement.second;
        }

        // BIOS-951 -- begin
        if (persist::is_epdu (asset.item.subtype_id) || persist::is_ups (asset.item.subtype_id))
        {
            cxxtools::SerializationInfo& sioutlets = siJson.addMember("outlets");
            for (const auto &it : outlet_properties) {
                cxxtools::SerializationInfo& siOutletProperties = sioutlets.addMember(it.first);

                siOutletProperties.addMember("power") <<= it.second.power;
                siOutletProperties.addMember("realpower") <<= it.second.realpower;
                siOutletProperties.addMember("current") <<= it.second.current;
                siOutletProperties.addMember("voltage") <<= it.second.voltage;

                if (it.second.status.empty()) {
                    siOutletProperties.addMember("status").setNull();
                }
                else {
                    siOutletProperties.addMember("status") <<= it.second.status;
                }
            }
        }
        // BIOS-951 -- end
    }//for

    // serialize json response
    std::ostringstream response(std::ios_base::out);
    cxxtools::JsonSerializer serializer(response);
    serializer.inputUtf8(true);
    serializer.serialize(siRoot).finish();

    reply.out() << response.str();
</%cpp>
