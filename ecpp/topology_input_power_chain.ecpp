<#
 #
 # Copyright (C) 2016 - 2020 Eaton
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 2 of the License, or
 # (at your option) any later version.
 #
 # This program is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License along
 # with this program; if not, write to the Free Software Foundation, Inc.,
 # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 #
 #><#
/*!
 * \file topology_input_power_chain.ecpp
 * \author François-Régis Degott <FrancoisRegisDegott@Eaton.com>
 * \brief  process topology input powerchain request via 'asset-agent' TOPOLOGY mailbox
 */
 #><%pre>
#include <fty_common.h>
#include <fty_common_macros.h>
#include <fty_common_rest_helpers.h>
#include <fty_common_db.h>
#include <fty_common_mlm_pool.h>
#include <pack/pack.h>

// =========================================================================================================================================

struct Json: public pack::Node
{
    struct Device: public pack::Node
    {
        pack::String name    = FIELD("name");
        pack::String id      = FIELD("id");
        pack::String subType = FIELD("sub_type");

        using pack::Node::Node;
        META(Device, name, id, subType);
    };

    struct Power: public pack::Node
    {
        pack::String srcId = FIELD("src-id");
        pack::String dstId = FIELD("dst-id");

        using pack::Node::Node;
        META(Power, srcId, dstId);
    };

    pack::ObjectList<Device> devices = FIELD("devices");
    pack::ObjectList<Power> powers   = FIELD("powerchains");

    using pack::Node::Node;
    META(Json, devices, powers);
};

static Json reorder(const Json& other, const std::string& fieldOrder, const std::string& dir)
{
    try {
        Json out;

        std::vector<std::string> ids;
        for (const auto& dev: other.devices) {
            ids.push_back(dev.id);
        }

        std::string sql = fmt::format(R"(
            SELECT e.name
            FROM t_bios_asset_element e
            LEFT JOIN t_bios_asset_ext_attributes a
                ON e.id_asset_element = a.id_asset_element AND a.keytag = '{0}'
            WHERE
                e.name in ({1})
            ORDER BY {2} {3}, e.id_asset_element {3}
        )",
            fieldOrder,
            fmt::format("'{}'", fty::implode(ids, "', '")),
            dir == "ASC" ? "COALESCE(a.value, 'ZZZZZZ999999')" : "a.value",
            dir
        );

        tntdb::Connection connection = tntdb::connect(DBConn::url);
        tntdb::Statement st = connection.prepareCached(sql);

        tntdb::Result result = st.select();
        for(const auto& row: result) {
            std::string name;
            row[0].get(name);

            auto it = other.devices.find([&](const Json::Device& dev) {
                return dev.id == name;
            });

            if (it) {
                out.devices.append(*it);
            } else {
                logWarn("Device with name {} was not found", name);
            }
        }
        out.powers = other.powers;

        return out;
    } catch(const std::exception& ex) {
        logError("Reorder error {}", ex.what());
        return other;
    }
}

// =========================================================================================================================================

// set S with MSG popped frame (S unchanged if NULL frame)
static void zmsg_pop_s (zmsg_t *msg, std::string & s)
{
    char *aux = msg ? zmsg_popstr (msg) : NULL;
    if (aux) { s = aux; zstr_free (&aux); }
}
</%pre>
<%request scope="global">
    UserInfo user;
    bool database_ready;
</%request>
<%cpp>
{
    // verify server is ready
    if (!database_ready) {
        log_debug ("Database is not ready yet.");
        http_die ("internal-error", "Database is not ready yet, please try again after a while.");
    }

    // check user permissions
    static const std::map <BiosProfile, std::string> PERMISSIONS = {
            {BiosProfile::Admin,         "R"},
            {BiosProfile::Dashboard,     "R"}
    };
    CHECK_USER_PERMISSIONS_OR_DIE (PERMISSIONS);

    //ftylog_setVeboseMode(ftylog_getInstance());
    log_trace ("in %s", request.getUrl().c_str ());

    const char *ADDRESS = AGENT_FTY_ASSET; // "asset-agent" 42ty/fty-asset
    const char *SUBJECT = "TOPOLOGY";
    const char *COMMAND = "INPUT_POWERCHAIN";
    const int TIMEOUT = 5; // seconds

    // get param, id of datacenter retrieved from url
    std::string asset_id = request.getArg ("id");
    if (asset_id.empty ()) {
        std::string expected = TRANSLATE_ME("existing asset name");
        http_die ("request-param-bad", "dc_id", asset_id.c_str (), expected.c_str ());
    }

    // db checks
    {
        // asset_id valid?
        if (!persist::is_ok_name (asset_id.c_str ()) ) {
            std::string expected = TRANSLATE_ME("valid asset name");
            http_die ("request-param-bad", "dc_id", asset_id.c_str (), expected.c_str ());
        }
        // asset_id exist?
        int64_t rv = DBAssets::name_to_asset_id (asset_id);
        if (rv == -1) {
            http_die ("element-not-found", asset_id.c_str ());
        }
        if (rv == -2) {
            std::string err = TRANSLATE_ME("Connection to database failed.");
            http_die ("internal-error", err.c_str ());
        }
    }

    log_trace ("%s, asset_id: '%s'",
        request.getUrl().c_str (), asset_id.c_str ());

    // connect to mlm client
    auto client = mlm_pool.get();
    if (!client) {
        log_error ("mlm_pool.get () failed");
        std::string err = TRANSLATE_ME("Connection to mlm client failed.");
        http_die ("internal-error", err.c_str());
    }

    // set/send req, recv response
    zmsg_t *req = zmsg_new ();
    if (!req) {
        log_error ("zmsg_new () failed");
        std::string err = TRANSLATE_ME("Memory allocation failed.");
        http_die ("internal-error", err.c_str());
    }

    zmsg_addstr (req, COMMAND);
    zmsg_addstr (req, asset_id.c_str ());
    zmsg_t *resp = client->requestreply (ADDRESS, SUBJECT, TIMEOUT, &req);
    zmsg_destroy (&req);

    #define CLEANUP { zmsg_destroy (&resp); }

    if (!resp) {
        CLEANUP;
        log_error ("client->requestreply (timeout = %d s) failed", TIMEOUT);
        std::string err = TRANSLATE_ME("Request to mlm client failed (timeout reached).");
        http_die ("internal-error", err.c_str());
    }

    // get resp. header
    std::string rx_command, rx_asset_id, rx_status;
    zmsg_pop_s(resp, rx_command);
    zmsg_pop_s(resp, rx_asset_id);
    zmsg_pop_s(resp, rx_status);

    if (rx_command != COMMAND) {
        CLEANUP;
        log_error ("received inconsistent command ('%s')", rx_command.c_str ());
        std::string err = TRANSLATE_ME("Received inconsistent command ('%s').", rx_command.c_str ());
        http_die ("internal-error", err.c_str());
    }
    if (rx_asset_id != asset_id) {
        CLEANUP;
        log_error ("received inconsistent assetID ('%s')", rx_asset_id.c_str ());
        std::string err = TRANSLATE_ME("Received inconsistent asset ID ('%s').", rx_asset_id.c_str ());
        http_die ("internal-error", err.c_str());
    }
    if (rx_status != "OK") {
        std::string reason;
        zmsg_pop_s(resp, reason);
        CLEANUP;
        log_error ("received %s status (reason: %s) from mlm client", rx_status.c_str(), reason.c_str ());
        http_die ("request-param-bad", "dc_id", asset_id.c_str(), JSONIFY (reason.c_str ()).c_str ());
    }

    std::string order_by = "asset_order";
    std::string order_dir = "ASC";
    {
        std::string order = qparam.param("orderBy");
        std::string dir = qparam.param("order");
        if (!order.empty()) {
            static const std::set<std::string> orders = {"name", "model", "create_ts", "firmware", "max_power", "serial_no", "update_ts", "asset_order"};
            if (orders.find(order) == orders.end()) {
                std::string err = fmt::format("Wrong order {}", order);
                logError(err);
                http_die ("internal-error", ("unexpected parameter: " + err).c_str());
            }
            order_by = order;
        }
        if (!dir.empty()) {
            if (dir == "ASC" || dir == "DESC") {
                order_dir = dir;
            } else {
                std::string err = fmt::format("Wrong dir {}", order);
                logError(err);
                http_die ("internal-error", ("unexpected parameter: " + err).c_str());
            }
        }
    }

    // result JSON payload
    std::string json;
    zmsg_pop_s(resp, json);
    if (json.empty()) {
        CLEANUP;
        log_error ("empty JSON payload");
        std::string err = TRANSLATE_ME("Received an empty JSON payload.");
        http_die ("internal-error", err.c_str());
    }
    CLEANUP;
    #undef CLEANUP

    if (!order_by.empty()) {
        Json out;
        if (auto ret = pack::json::deserialize(json, out); !ret) {
            logError("Bad JSON payload: {}", ret.error());
            std::string err = TRANSLATE_ME("Received an wrong JSON payload");
            http_die ("internal-error", err.c_str());
        }

        // set body (status is 200 OK)
        reply.out() << *pack::json::serialize(reorder(out, order_by, order_dir));
    } else {
        reply.out() << json;
    }
}
</%cpp>
