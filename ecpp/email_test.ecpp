<#
 #
 # Copyright (C) 2016 - 2020 Eaton
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 2 of the License, or
 # (at your option) any later version.
 #
 # This program is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License along
 # with this program; if not, write to the Free Software Foundation, Inc.,
 # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 #
 #><#
/*!
 * \file email_test.ecpp
 * \author Barbora Stepankova <BarboraStepankova@Eaton.com>
 * \brief Sends test email.
 */
 #><%pre>
#include <fty_common_macros.h>
#include <fty_common_rest_helpers.h>
#include <fty_common_mlm_pool.h>
#include <fty_common_mlm_guards.h>
#include <fty_common_agents.h>
#include <fty_common_utf8.h>
#include <stdlib.h>
#include <sys/types.h>
#include <fty_common_rest_audit_log.h>

// encode GET message for smtp agent
static zmsg_t*
s_smtp_GET_message (const char* email, zuuid_t *uuid)
{
    assert (email);

    zmsg_t *msg = zmsg_new ();
    zmsg_addstr (msg, zuuid_str_canonical (uuid));
    zmsg_addstr (msg, email);
    zmsg_addstr (msg, "Test email");                              // email subject
    zmsg_addstr (msg, "This is email test. Do not reply.");        // body
    return msg;
}

</%pre>
<%request scope="global">
UserInfo user;
</%request>
<%cpp>
    // check user permissions
    static const std::map <BiosProfile, std::string> PERMISSIONS = {
            {BiosProfile::Admin,     "C"}
            };
    std::string audit_msg = std::string ("Request CREATE email_test FAILED");
    CHECK_USER_PERMISSIONS_OR_DIE_AUDIT (PERMISSIONS, audit_msg.empty () ? nullptr : audit_msg.c_str ());

    std::string checked_email;
    unsigned _timeout = 60; //sec
    {
        std::string email = qparam.param ("to");

        if (email.empty ())
            email = qparam.param ("email");

        if (email.empty ()) {
            log_error_audit ("Request CREATE email_test FAILED");
            http_die ("request-param-required", "to");
        }

        if (email.find ('@', 0) == std::string::npos) {
            std::string expected =  TRANSLATE_ME ("valid email address");
            log_error_audit ("Request CREATE email_test FAILED");
            http_die ("request-param-bad", "to", email.c_str (), expected.c_str ());
        }

        checked_email = email;

        try {
            std::string aux = qparam.param ("_timeout");
            if (!aux.empty()) {
                _timeout = uint32_t(std::stoi(aux)); // sec
            }
        }
        catch (const std::exception& e) {
            //pass
        }
    }

    // connect to mlm client
    auto client = mlm_pool.get();
    if (!client) {
        log_fatal ("Error: mlm_pool.get () failed.");
        std::string err =  TRANSLATE_ME ("mlm_pool.get () failed.");
        log_error_audit ("Request CREATE email_test FAILED");
        http_die ("internal-error", err.c_str ());
    }

    // send message
    ZuuidGuard uuid (zuuid_new ());
    zmsg_t *send = s_smtp_GET_message (checked_email.c_str (), uuid);
    int rv = client->sendto (AGENT_FTY_EMAIL_SENDMAIL_ONLY, "SENDMAIL", 10, &send);
    zmsg_destroy (&send);
    if (rv == -1)
    {
        log_fatal (
                    "Error: client->sendto (address = '%s', subject = '%s', timeout = %ds) failed.",
                        AGENT_FTY_EMAIL_SENDMAIL_ONLY, "SENDMAIL", 10);
        std::string err =  TRANSLATE_ME ("client->sendto () failed");
        log_error_audit ("Request CREATE email_test FAILED");
        http_die ("internal-error", err.c_str ());
    }

    ZmsgGuard receive (client->recv (zuuid_str_canonical (uuid) , _timeout));
    if (!receive)
    {
        std::string msg = TRANSLATE_ME ("Error: client-> recv (timeout = '%d') returned NULL", _timeout);
        log_error ("%s", msg.c_str ());
        log_error_audit ("Request CREATE email_test FAILED");
        http_die ("internal-error", msg.c_str ());
    }

    ZstrGuard err_code (zmsg_popstr (receive));
    ZstrGuard err_message (zmsg_popstr (receive));
    const char *msg_subject = client->subject ();
    std::string status;

    if (streq (msg_subject, "SENDMAIL-OK"))
    {
         status = "Succeeded";
    }
    else
    if (streq (msg_subject, "SENDMAIL-ERR"))
    {
        status = "Failed";
        log_error_audit ("Request CREATE email_test FAILED");
        log_error("Send test mail failed.\n%s", err_message.get());
        std::string err = "Can not send email. SMTP server returned an error (Refer to more details in the logfile).";
        http_die ("upstream-err", err.c_str());
    }
    else
    {
        status = "Failed";
        log_fatal ("Error: message received with invalid subject.");
        std::string err =  TRANSLATE_ME ("client->recv () invalid message subject");
        log_error_audit ("Request CREATE email_test FAILED");
        http_die ("internal-error", err.c_str ());
    }
    log_info_audit ("Request CREATE email_test SUCCESS");

</%cpp>
{
    "test_status" :
    {
        "status" : "<$ status $>",
        "error_code" : <$ err_code $>,
        "reason" : "<$ err_message $>"
    }
}

