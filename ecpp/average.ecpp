<#
 #
 # Copyright (C) 2015 - 2020 Eaton
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 2 of the License, or
 # (at your option) any later version.
 #
 # This program is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License along
 # with this program; if not, write to the Free Software Foundation, Inc.,
 # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 #
 #><#
/*!
 * \file average.ecpp
 * \author Karol Hrdina <KarolHrdina@Eaton.com>
 * \author Michal Hrusecky <MichalHrusecky@Eaton.com>
 * \author Jim Klimov <EvgenyKlimov@Eaton.com>
 * \brief  Implementation of REST API call average/min/max
 */
 #><%pre>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <stdexcept>
#include <cstdlib>
#include <algorithm>
#include <ctime>
#include <regex>
#include <cxxtools/split.h>
#include <cxxtools/csvserializer.h>
#include <sys/types.h>
#include <fty_common_macros.h>
#include <fty_common_str_defs.h>
#include <fty_common_rest_helpers.h>
#include <fty_common_db_dbpath.h>
#include <fty_common_db_asset.h>
#include <fty_common_mlm_pool.h>

#include "shared/utils.h"
#include "shared/utilspp.h"
#include "cleanup.h"
#include <tntdb.h>

// Check if value of parameter 'relative' is supported:
//  * No - return false, value of unixtime is not changed
//  * Yes - return true; value of unixtime contains now - (relative expressed in seconds)
//
// Currently supported values of relative: 24h, 7d, 30d
// Expects string relative converted to lowercase.

bool relative_to_unixtime (const std::string& relative, int64_t now, int64_t& unixtime) {
    if (relative.compare ("24h") == 0) {
        unixtime = now - 86400;
        return true;
    }
    else if (relative.compare ("7d") == 0) {
        unixtime = now - 604800;
        return true;
    }
    else if (relative.compare ("30d") == 0) {
        unixtime = now - 2592000;
        return true;
    }
    return false;
}


</%pre>
<%request scope="global">
UserInfo user;
bool database_ready;
</%request>
<%cpp>
    // verify server is ready
    if (!database_ready) {
        log_debug ("Database is not ready yet.");
        std::string err =  TRANSLATE_ME ("Database is not ready yet, please try again after a while.");
        http_die ("internal-error", err.c_str ());
    }

    // check user permissions
    static const std::map <BiosProfile, std::string> PERMISSIONS = {
            {BiosProfile::Dashboard, "R"},
            {BiosProfile::Admin,     "R"}
            };
    CHECK_USER_PERMISSIONS_OR_DIE (PERMISSIONS);

    std::string csv = request.getArg ("csv");
    log_debug ("csv == %s", csv.c_str ());

    // Input arguments checking
    std::string checked_start_ts;
    std::string checked_end_ts;
    std::string checked_type;
    std::string checked_step;
    std::string checked_source;
    bool checked_ordered = false;
    uint32_t checked_element_id;
    std::string checked_relative;
    {
        std::string start_ts = qparam.param ("start_ts");
        std::string end_ts = qparam.param ("end_ts");
        std::string type = qparam.param ("type");
        std::string step = qparam.param ("step");
        std::string source = qparam.param ("source");
        std::string element_id = qparam.param ("element_id");
        std::string relative = qparam.param ("relative");
        std::string ordered = qparam.param ("ordered");

        check_regex_text_or_die ("start_ts", start_ts, checked_start_ts, "^([0-9]{14}Z|)$");
        check_regex_text_or_die ("end_ts", end_ts, checked_end_ts, "^([0-9]{14}Z|)$");
        check_regex_text_or_die ("step", step, checked_step, "^([0-9]{1,2}[a-z]|)$");
        check_element_identifier_or_die ("element_id", element_id, checked_element_id);
        check_regex_text_or_die ("source", source, checked_source, "^[-_.@a-z0-9]{0,255}$");
        if (csv != "yes") {
            check_regex_text_or_die ("type", type, checked_type, "^(arithmetic_mean|min|max|consumption|)$");
            check_regex_text_or_die ("relative", relative, checked_relative, "^([0-9]{1,2}[a-z]|)$");
            check_regex_text_or_die ("ordered", ordered, ordered, "^(true|false|)$");
            if ( ordered == "true" ) {
                checked_ordered = true;
            }
        }
    }

    int64_t st = -1, end = -1;
    if (checked_relative.empty ()) { // this executes for csv == "yes" as well
        // check both start_ts and end_ts
        if (checked_start_ts.empty ()) {
            // The message looks strange, but both 'relative' and 'start_ts'
            // parameters are empty here!
            // possible compinations:
            //      ( relative != "" ) XOR ( start_ts != "" AND end_ts != "" )
            if (csv != "yes") { // for non-csv we parse "relative", for csv by BIOS-3225 we do not yet
                std::string err = TRANSLATE_ME ("start_ts or relative");
                http_die ("request-param-required", err.c_str ());
            } else {
                http_die ("request-param-required", "start_ts");
            }
        }
        st = datetime_to_calendar (checked_start_ts.c_str ());
        if (st < 0) {
            http_die ("request-param-bad", "start_ts", std::string ("'").append (checked_start_ts).append ("'").c_str (),
                std::string ("format 'YYYYMMDDhhmmssZ (Error=").append(std::to_string(st).c_str ()).append (")").c_str ());
        }
        if (checked_end_ts.empty ()) {
            http_die ("request-param-required", "end_ts");
        }
        end = datetime_to_calendar (checked_end_ts.c_str ());
        if (end < 0) {
            http_die ("request-param-bad", "end_ts", std::string ("'").append (checked_end_ts).append ("'").c_str (),
                std::string ("format 'YYYYMMDDhhmmssZ (Error=").append(std::to_string(st).c_str ()).append (")").c_str ());
        }

        // check that start_ts < end_ts
        if (end <= st) {
            std::string err = TRANSLATE_ME ("Start timestamp '%s' is greater than end timestamp '%s'.", checked_start_ts.c_str (), checked_end_ts.c_str ());
            http_die ("parameter-conflict", err.c_str ());
        }
    }
    else {
        // check value of relative parameter
        std::transform (checked_relative.begin (), checked_relative.end (), checked_relative.begin (), ::tolower);
        int64_t now = time(NULL);
        if (!relative_to_unixtime (checked_relative, now, st)) {
            std::string expected = TRANSLATE_ME ("one of the following values: '24h', '7d', '30d'.");
            http_die ("request-param-bad", "relative", std::string ("'").append (checked_relative).append ("'").c_str (), expected.c_str ());
        }
        end = time(NULL);
    }

    log_debug ("st = '%" PRIi64"', end = '%" PRIi64"'", st, end);

    // type is optional, default type is arithmetic average
    if (checked_type.empty ()) {
        checked_type.assign (AVG_TYPES[0]);
    }
    else if (!is_average_type_supported (checked_type.c_str ())) {
        std::string expected = TRANSLATE_ME ("one of the following values: [%s]", utils::join (AVG_TYPES, AVG_TYPES_SIZE, ", ").c_str ());
        http_die ("request-param-bad", "type",
                  std::string ("'").append (checked_type).append ("'").c_str (), expected.c_str ());
    }

    // step
    if (checked_step.empty ()) {
        http_die ("request-param-required", "step");
    }
    if (!is_average_step_supported (checked_step.c_str ())) {
        std::string expected = TRANSLATE_ME ("one of the following values: [%s]", utils::join (AVG_STEPS, AVG_STEPS_SIZE, ", ").c_str ());
        http_die ("request-param-bad", "step",
                  std::string ("'").append (checked_step).append ("'").c_str (), expected.c_str ());
    }

    // source
    if (checked_source.empty ()) {
        http_die ("request-param-required", "source");
    }

    std::string element_name;
    try {
        tntdb::Connection conn = tntdb::connect (DBConn::url);

        auto basic_ret = DBAssets::select_asset_element_web_byId (conn, checked_element_id);
        if ( basic_ret.status == 0 && basic_ret.errsubtype == DB_ERROR_NOTFOUND) {
            http_die ("element-not-found", "");
        }
        if ( basic_ret.status == 0 && basic_ret.errsubtype == DB_ERROR_INTERNAL) {
            std::string err =  TRANSLATE_ME ("Database failure");
            http_die ("internal-error", err.c_str ());
        }

        element_name = basic_ret.item.name;
    }
    catch (const std::exception &e) {
        std::string err = JSONIFY (e.what ());
        http_die ("internal-error", err.c_str ());
    }

    // connect to malamute
    auto client = mlm_pool.get();
    if (!client) {
        log_fatal ("mlm_pool.get () failed.");
        std::string err = TRANSLATE_ME ("mlm_pool.get () failed.");
        http_die ("internal-error", err.c_str ());
    }

    if (csv == "yes")
    {
        std::vector <std::vector <std::string>> csv_data;
        bool got_timestamps = false;

        for (int i = 0; i < AVG_TYPES_SIZE; i++)
        {
            zuuid_t *uuid = zuuid_new ();
            zmsg_t *sent_msg = zmsg_new ();
            zmsg_addstr (sent_msg, zuuid_str_canonical (uuid));
            zmsg_addstr (sent_msg, "GET");
            zmsg_addstr (sent_msg, element_name.c_str ());
            zmsg_addstr (sent_msg, checked_source.c_str ());
            zmsg_addstr (sent_msg, checked_step.c_str ());
            zmsg_addstr (sent_msg, AVG_TYPES [i]);
            zmsg_addstr (sent_msg, std::to_string (st).c_str ());
            zmsg_addstr (sent_msg, std::to_string (end).c_str ());
            zmsg_addstr (sent_msg, "1"); // ordered

            int rv = client->sendto ("fty-metric-store", "aggregated data", 1000, &sent_msg);
            zmsg_destroy(&sent_msg);
            if (rv == -1) {
                zuuid_destroy (&uuid);
                log_fatal ("Cannot send message to fty-metric-store");
                std::string err =  TRANSLATE_ME ("mlm_client_sendto failed.");
                http_die ("internal-error", err.c_str ());
            }

            zmsg_t *recv_msg = client->recv (zuuid_str_canonical (uuid), 30);
            zuuid_destroy (&uuid);
            if (!recv_msg) {
                log_fatal ("client->recv (timeout = '30') returned NULL");
                std::string err = TRANSLATE_ME ("client->recv () returned NULL");
                http_die ("internal-error", err.c_str ());
            }

            char *frame = zmsg_popstr (recv_msg);

            // die on error
            if (!(frame && streq(frame, "OK"))) {
                zstr_free (&frame);
                frame = zmsg_popstr (recv_msg);
                zmsg_destroy (&recv_msg);
                log_info ("error frame == '%s'", frame);

                if (frame) {
                    if (streq (frame, "BAD_REQUEST")) {
                        zstr_free (&frame);

                        std::string die = TRANSLATE_ME ("Data for type = '%s', step = '%s', source = '%s', element_name = '%s'",
                                checked_type.c_str (), checked_step.c_str (), checked_source.c_str (), element_name.c_str ());
                        http_die ("element-not-found", die.c_str ());
                    }
                    std::string err{frame};
                    zstr_free (&frame);
                    http_die ("internal-error", err.c_str());
                }
                http_die ("internal-error", "");
            }
            zstr_free (&frame);

            // success, parse response
            {
                // get header
                char *element_rep = zmsg_popstr (recv_msg);
                char *source_rep = zmsg_popstr (recv_msg);
                char *step_rep = zmsg_popstr (recv_msg);
                char *type_rep = zmsg_popstr (recv_msg);
                char *start_date_rep = zmsg_popstr (recv_msg);
                char *end_date_rep = zmsg_popstr (recv_msg);
                char *ordered = zmsg_popstr (recv_msg);
                char *units_rep = zmsg_popstr (recv_msg);

                // we got some datas?
                if (zmsg_size(recv_msg) >= 2) {
                    if (!got_timestamps) {
                        // first row: "type" label + timestamps receipt (index 0)
                        csv_data.push_back (std::vector <std::string> {"type"});
                    }

                    // add a new row: type_rep label + datas
                    csv_data.push_back (std::vector <std::string> {type_rep});
                    std::size_t csvLastIndex = csv_data.size() - 1;

                    // fill in datas, pairs of (timestamp, value)
                    while (zmsg_size(recv_msg) >= 2) {
                        char *timestamp = zmsg_popstr (recv_msg);
                        char *value = zmsg_popstr (recv_msg);

                        if (!got_timestamps) {
                            csv_data [0].push_back (timestamp);
                        }
                        csv_data [csvLastIndex].push_back (value);

                        zstr_free (&value);
                        zstr_free (&timestamp);
                    }

                    got_timestamps = true; // push timestamps once
                }

                // cleanup
                zstr_free (&element_rep);
                zstr_free (&source_rep);
                zstr_free (&step_rep);
                zstr_free (&type_rep);
                zstr_free (&start_date_rep);
                zstr_free (&end_date_rep);
                zstr_free (&ordered);
                zstr_free (&units_rep);
            }

            zmsg_destroy (&recv_msg);
        } // end for-cycle

        std::string element_ename;
        DBAssets::name_to_extname (element_name, element_ename);
        //escape special characters
        element_ename = std::regex_replace(element_ename, std::regex("( |\t)"), "_");

        std::string export_file_name =
            "export_"
            + checked_start_ts + "_"
            + checked_end_ts + "_"
            + checked_step + "_"
            + checked_source + "_"
            + element_ename
            + ".csv";

        reply.setHeader (tnt::httpheader::contentDisposition,
            std::string{"attachment; filename=\"" + export_file_name + "\""}.c_str()
        );
        reply.setContentType ("text/csv;charset=UTF-8");
        cxxtools::CsvSerializer serializer (reply.out ());
        serializer.serialize (csv_data);
    }
    else // csv == "no"
    {
        zuuid_t *uuid = zuuid_new ();
        zmsg_t *sent_msg = zmsg_new ();
        zmsg_addstr (sent_msg, zuuid_str_canonical (uuid));
        zmsg_addstr (sent_msg, "GET");
        zmsg_addstr (sent_msg, element_name.c_str ());
        zmsg_addstr (sent_msg, checked_source.c_str ());
        zmsg_addstr (sent_msg, checked_step.c_str ());
        zmsg_addstr (sent_msg, checked_type.c_str ());
        zmsg_addstr (sent_msg, std::to_string (st).c_str ());
        zmsg_addstr (sent_msg, std::to_string (end).c_str ());
        zmsg_addstr (sent_msg, (checked_ordered ? "1" : "0") );

        int rv = client->sendto ("fty-metric-store", "aggregated data", 1000, &sent_msg);
        zmsg_destroy(&sent_msg);
        if (rv == -1) {
            zuuid_destroy (&uuid);
            log_fatal ("Cannot send message to fty-metric-store");
            std::string err = TRANSLATE_ME ("mlm_client_sendto failed.");
            http_die ("internal-error", err.c_str ());
        }

        zmsg_t *recv_msg = client->recv (zuuid_str_canonical (uuid), 30);
        zuuid_destroy (&uuid);
        if (!recv_msg) {
            log_fatal ("client->recv (timeout = '30') returned NULL");
            std::string err = TRANSLATE_ME ("client->recv () returned NULL");
            http_die ("internal-error", err.c_str ());
        }

        char *frame = zmsg_popstr (recv_msg);

        // die on error
        if (!(frame && streq(frame, "OK"))) {
            zstr_free (&frame);
            frame = zmsg_popstr (recv_msg);
            zmsg_destroy (&recv_msg);
            log_info ("error frame == '%s'", frame);

            if (frame) {
                if (streq (frame, "BAD_REQUEST")) {
                    zstr_free (&frame);
                    std::string die = TRANSLATE_ME ("Data for type = '%s', step = '%s', source = '%s', element_name = '%s'",
                            checked_type.c_str (), checked_step.c_str (), checked_source.c_str (), element_name.c_str ());
                    http_die ("element-not-found", die.c_str ());
                }
                std::string err{frame};
                zstr_free (&frame);
                http_die ("internal-error", err.c_str());
            }
            http_die ("internal-error", "");
        }
        zstr_free (&frame);

        // success, parse response
        {
            // now we are going to set up the head of the response
            char *element_rep = zmsg_popstr (recv_msg);
            char *source_rep = zmsg_popstr (recv_msg);
            char *step_rep = zmsg_popstr (recv_msg);
            char *type_rep = zmsg_popstr (recv_msg);
            char *start_date_rep = zmsg_popstr (recv_msg);
            char *end_date_rep = zmsg_popstr (recv_msg);
            char *ordered = zmsg_popstr (recv_msg);
            char *units_rep = zmsg_popstr (recv_msg);
</%cpp>
        {
            <$$ utils::json::jsonify ("units", units_rep) $>,
            <$$ utils::json::jsonify ("source", source_rep) $>,
            <$$ utils::json::jsonify ("step", step_rep) $>,
            <$$ utils::json::jsonify ("type", type_rep) $>,
            <$$ utils::json::jsonify ("element_id", element_name) $>,
            <$$ utils::json::jsonify ("start_ts", start_date_rep) $>,
            <$$ utils::json::jsonify ("end_ts", end_date_rep) $>,
            "data":[
<%cpp>
            // first of all, need to clean up
            zstr_free (&element_rep);
            zstr_free (&source_rep);
            zstr_free (&step_rep);
            zstr_free (&type_rep);
            zstr_free (&start_date_rep);
            zstr_free (&units_rep);
            zstr_free (&ordered);
            // now we are going to fill in data
            while  ( zmsg_size (recv_msg) >= 2 ) {
                char *timestamp = zmsg_popstr (recv_msg);
                char *value = zmsg_popstr (recv_msg);
</%cpp>
                {
                    "value": <$$ value $>,
                    "timestamp": <$$ timestamp $>,
                    "scale": 0
                } <$$ zmsg_size (recv_msg) != 0 ? "," : "" $>
<%cpp>
                zstr_free (&value);
                zstr_free (&timestamp);
            }
</%cpp>
            ]
        }
<%cpp>
    	}

    	zmsg_destroy (&recv_msg);
	} //csv
</%cpp>
