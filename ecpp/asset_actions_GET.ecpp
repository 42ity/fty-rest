<#
 #
 # Copyright (C) 2015 - 2020 Eaton
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 2 of the License, or
 # (at your option) any later version.
 #
 # This program is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License along
 # with this program; if not, write to the Free Software Foundation, Inc.,
 # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 #
 #><#
/*!
 * \file asset_actions_GET.ecpp
 * \author Jean-Baptiste Boric <JeanBaptisteBorid@Eaton.com>
 * \brief Implementation of GET operation for actions on asset
 */
 #><%pre>
#include <cxxtools/regex.h>

#include <fty_proto.h>
#include <malamute.h>

#include "shared/data.h"
#include "shared/utils_json.h"
#include "web/src/asset_computed_impl.h"
#include <fty_common_rest_helpers.h>
#include <fty_common_asset_types.h>
#include <fty_common_dto.h>
#include <fty_common_mlm.h>
#include <fty_common_messagebus.h>
#include <fty_common_mlm_utils.h>
#include <fty_common_macros.h>
#include <cxxtools/serializationinfo.h>
#include <cxxtools/jsonserializer.h>
</%pre>
<%request scope="global">
UserInfo user;
bool database_ready;
</%request>
<%cpp>
    // verify server is ready
    if (!database_ready) {
        log_debug ("Database is not ready yet.");
        std::string err =  TRANSLATE_ME ("Database is not ready yet, please try again after a while.");
        http_die ("internal-error", err.c_str ());
    }

    // check user permissions
    static const std::map <BiosProfile, std::string> PERMISSIONS = {
            {BiosProfile::Dashboard, "R"},
            {BiosProfile::Admin,     "R"}
            };
    CHECK_USER_PERMISSIONS_OR_DIE (PERMISSIONS);
    std::string checked_id; // user-friendly identifier

    // sanity check
    {
        std::string id = request.getArg("id");
        if ( id.empty() ) {
            http_die("request-param-required", "id");
        }

        if ( !persist::is_ok_name (id.c_str ()) ) {
            std::string err = TRANSLATE_ME ("valid asset name");
            http_die ("request-param-bad", "id", id.c_str (), err.c_str ());
        }
        checked_id = id;
    }
    // end sanity checks

    auto msgbus = std::unique_ptr<messagebus::MessageBus>(messagebus::MlmMessageBus(MLM_ENDPOINT, messagebus::getClientId("tntnet")));
    msgbus->connect();

    dto::commands::GetCommandsQueryDto queryDto;
    queryDto.asset = checked_id;

    messagebus::Message msgRequest;
    msgRequest.metaData()[messagebus::Message::CORRELATION_ID] = messagebus::generateUuid();
    msgRequest.metaData()[messagebus::Message::TO] = "fty-nut-command";
    msgRequest.metaData()[messagebus::Message::SUBJECT] = "GetCommands";
    msgRequest.userData() << queryDto;
    auto msgReply = msgbus->request("ETN.Q.IPMCORE.POWERACTION", msgRequest, 10);

    if (msgReply.metaData()[messagebus::Message::STATUS] != "ok") {
        std::string err = "Request to fty-nut-command failed.";
        log_error (err.c_str ());
        http_die ("precondition-failed", TRANSLATE_ME (err.c_str ()).c_str ());
    }

    dto::commands::GetCommandsReplyDto replyDto;
    msgReply.userData() >> replyDto;
    cxxtools::SerializationInfo replySi;
    replySi.setCategory(cxxtools::SerializationInfo::Category::Array);

    for (const auto& command : replyDto) {
        cxxtools::SerializationInfo commandSi;
        commandSi.setCategory(cxxtools::SerializationInfo::Category::Object);
        commandSi.addValue("command", command.command);
        commandSi.addValue("description", command.description);

        cxxtools::SerializationInfo targetsSi;
        targetsSi.setName("targets");
        if (!command.targets.empty()) {
            targetsSi.setCategory(cxxtools::SerializationInfo::Category::Array);
            for (const auto& target : command.targets) {
                targetsSi.addMember("") <<= target;
            }
        }

        commandSi.addMember("targets") <<= targetsSi;
        replySi.addMember("") <<= commandSi;
    }

    // Serialize reply.
    cxxtools::JsonSerializer serializer(reply.out());
    serializer.serialize(replySi).finish();
</%cpp>
