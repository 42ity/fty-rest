<#
 #
 # Copyright (C) 2016 - 2020 Eaton
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 2 of the License, or
 # (at your option) any later version.
 #
 # This program is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License along
 # with this program; if not, write to the Free Software Foundation, Inc.,
 # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 #
 #><#
/*!
 * \file    scan_progress.ecpp
 * \author  Jana Rapava <JanaRapava@Eaton.com>
 * \brief   This call provides information about progress of autodiscovery scan.
 */
 #><%pre>
#include <string>
#include <fty_common_macros.h>
#include <fty_common_mlm_pool.h>
#include <fty_common_mlm_guards.h>
#include <fty_common_rest_helpers.h>

// request progress to the fty-discovery service
// returns 0 if ok, else <0
// if ok, output is set as the response (json payload)
static int get_scan_progress (std::string& output)
{
    output.clear();

    // connect to mlm client
    auto client = mlm_pool.get();
    if (!client) {
        log_error ("scan_progress: mlm_pool.get () failed.");
        return -1;
    }

    // send request
    zuuid_t *uuid = zuuid_new ();
    zmsg_t *msg = zmsg_new ();
    zmsg_addstr (msg, "PROGRESS");
    zmsg_addstr (msg, zuuid_str_canonical (uuid));
    int rv = client->sendto ("fty-discovery", "progress", 20, &msg);
    zmsg_destroy (&msg);

    if (rv == -1) {
        zuuid_destroy (&uuid);
        log_error ("scan_progress: client->sendto (address = '%s') failed.", "fty-discovery");
        return -2;
    }

    ZmsgGuard resp(client->recv (zuuid_str_canonical (uuid), 20));
    zuuid_destroy (&uuid);

    if (!resp) {
        log_error ("scan_progress: client->recv (timeout = '20') returned NULL");
        return -3;
    }

    ZstrGuard result (zmsg_popstr (resp));
    if (!result) {
        log_error("scan_progress: received unexpected NULL response");
        return -4;
    }
    if (streq (result, "ERROR")) {
        log_error("scan_progress: received ERROR response");
        return -5;
    }
    if (!streq (result, "OK")) {
        log_error("scan_progress: received unexpected response");
        return -6;
    }

    // here result == "OK"

    ZstrGuard status (zmsg_popstr (resp));
    if (!status) {
        log_error("scan_progress: status is NULL");
        return -7;
    }

    output.append("{");

    output.append("\"status\": \"").append(status).append("\"");

    if (!streq(status, "-1")) {
        // scan details
        ZstrGuard progress (zmsg_popstr (resp));
        ZstrGuard discovered (zmsg_popstr (resp));
        ZstrGuard discovered_ups (zmsg_popstr (resp));
        ZstrGuard discovered_epdu (zmsg_popstr (resp));
        ZstrGuard discovered_sts (zmsg_popstr (resp));
        ZstrGuard discovered_sensors (zmsg_popstr (resp));

        if (!progress) { log_error("scan_progress: progress is NULL"); return -7; }
        if (!discovered) { log_error("scan_progress: discovered is NULL"); return -7; }
        if (!discovered_ups) { log_error("scan_progress: discovered_ups is NULL"); return -7; }
        if (!discovered_epdu) { log_error("scan_progress: discovered_epdu is NULL"); return -7; }
        if (!discovered_sts) { log_error("scan_progress: discovered_sts is NULL"); return -7; }
        if (!discovered_sensors) { log_error("scan_progress: discovered_sensors is NULL"); return -7; }

        output.append(", \"progress\": \"").append(progress).append("%\"");
        output.append(", \"discovered\": \"").append(discovered).append("\"");
        output.append(", \"ups-discovered\": \"").append(discovered_ups).append("\"");
        output.append(", \"epdu-discovered\": \"").append(discovered_epdu).append("\"");
        output.append(", \"sts-discovered\": \"").append(discovered_sts).append("\"");
        output.append(", \"sensors-discovered\": \"").append(discovered_sensors).append("\"");
    }

    output.append("}");

    return 0;
}

</%pre>
<%request scope="global">
UserInfo user;
</%request>
<%cpp>
    // permission check
    static const std::map <BiosProfile, std::string> PERMISSIONS = {
        {BiosProfile::Anonymous, "R"},
        {BiosProfile::Dashboard, "R"},
        {BiosProfile::Admin,     "R"}
    };
    CHECK_USER_PERMISSIONS_OR_DIE (PERMISSIONS);

    std::string output;
    int rv = get_scan_progress (output);

    if (rv != 0) {
        log_error("get_scan_progress() failed (rv: %d)", rv);
        std::string err = TRANSLATE_ME("Automatic discovery service not available");
        http_die ("internal-error", err.c_str());
    }

    reply.out () << output;
</%cpp>
