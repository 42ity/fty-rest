<#
 #
 # Copyright (C) 2015 - 2020 Eaton
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 2 of the License, or
 # (at your option) any later version.
 #
 # This program is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License along
 # with this program; if not, write to the Free Software Foundation, Inc.,
 # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 #
 #><#
/*!
 * \file    info.ecpp
 * \author  Barbora Stepankova <BarboraStepankova@Eaton.com>
 * \brief   This call provides information about rack controller.
 */
 #><%pre>
#include <string>
#include <fty_common_mlm_pool.h>
#include <fty_common_rest_helpers.h>
#include <fty_common_macros.h>

// info request
static zmsg_t* req_info (zuuid_t *uuid)
{
    zmsg_t *msg = zmsg_new ();
    zmsg_addstr (msg, "INFO");
    zmsg_addstr (msg, zuuid_str_canonical (uuid));
    return msg;
}

// fty-info data
// returns 0 if success, lese <0 (see code)
static int get_rc_info (std::string &output)
{
    output.clear();

    // connect to mlm client
    auto client = mlm_pool.get();
    if (!client)
    {
        log_fatal ("info: mlm_pool.get () failed.");
        return -1;
    }

    zuuid_t *uuid = zuuid_new ();
    zmsg_t *send = req_info (uuid);
    int rv = client->sendto ("fty-info", "info", 5, &send);
    zmsg_destroy(&send);

    if (rv == -1)
    {
        zuuid_destroy (&uuid);
        log_fatal ("info: client->sendto (address = '%s') failed.", "fty-info");
        return -2;
    }

    zmsg_t *resp = client->recv (zuuid_str_canonical (uuid), 5);
    zuuid_destroy (&uuid);
    if (!resp)
    {
        log_fatal ("info: client->recv (timeout = '5') returned NULL");
        return -3;
    }

    char *command = zmsg_popstr (resp);
    char *srv_name  = zmsg_popstr (resp);
    char *srv_type  = zmsg_popstr (resp);
    char *srv_stype = zmsg_popstr (resp);
    char *srv_port  = zmsg_popstr (resp);
    zframe_t *frame_infos = zmsg_next (resp);
    zhash_t *infos = zhash_unpack(frame_infos);

    output += "{\n";
    output += "\"service\" : {\n";
    output += utils::json::jsonify("name", srv_name) + ",\n";
    output += utils::json::jsonify("type", srv_type) + ",\n";
    output += utils::json::jsonify("sub_type", srv_stype)+ ",\n";
    output += utils::json::jsonify("port", srv_port);
    output += "\n},";
    output += "\"attributes\": {\n";

    char *value = static_cast<char*>(zhash_first(infos));   // first value
    while (value)
    {
        char *key = const_cast<char*>(zhash_cursor(infos));   // key of this value
        output += utils::json::jsonify(key, value);

        value = static_cast<char*>(zhash_next(infos));   // next value
        if (value) output += ",\n";
    }

    output += "\n}";
    output += "\n}";

    zstr_free (&command);
    zstr_free(&srv_name);
    zstr_free(&srv_type);
    zstr_free(&srv_stype);
    zstr_free(&srv_port);
    zhash_destroy(&infos);

    zmsg_destroy(&resp);

    return 0;
}
</%pre>
<%request scope="global">
UserInfo user;
</%request>
<%cpp>
    // permission check
    static const std::map <BiosProfile, std::string> PERMISSIONS = {
            {BiosProfile::Anonymous, "R"},
            {BiosProfile::Dashboard, "R"},
            {BiosProfile::Admin,     "R"}
            };
    CHECK_USER_PERMISSIONS_OR_DIE (PERMISSIONS);

    std::string output;
    int rv = get_rc_info (output);

    if (rv != 0) { // failed
        if (rv == -1) {
            std::string err = TRANSLATE_ME ("mlmpool.get () failed.");
            http_die ("internal-error", err.c_str ());
        }
        if (rv == -2) {
            std::string err = TRANSLATE_ME ("client->sendto () failed.");
            http_die ("internal-error", err.c_str ());
        }

        std::string err = TRANSLATE_ME ("client->recv () failed.");
        http_die ("internal-error", err.c_str ());
    }

    reply.out () << output;
</%cpp>
