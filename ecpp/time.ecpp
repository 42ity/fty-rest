<#
 #
 # Copyright (C) 2015 - 2020 Eaton
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 2 of the License, or
 # (at your option) any later version.
 #
 # This program is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License along
 # with this program; if not, write to the Free Software Foundation, Inc.,
 # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 #
 #><#
/*!
 * \file time.ecpp
 * \author Michal Hrusecky <MichalHrusecky@Eaton.com>
 * \author Karol Hrdina <KarolHrdina@Eaton.com>
 * \brief  manipulating with system time (manual setup and ntp)
 */
 #><%pre>
#include <iostream>
#include <sstream>
#include <cxxtools/regex.h>
#include <cxxtools/jsondeserializer.h>
#include "shared/augtool.h"
#include "shared/utils.h"
#include <fty_common_rest_helpers.h>
#include <fty_common_rest_utils_web.h>
#include <fty_common_macros.h>
#include <time.h>
#include <fty_common_rest_audit_log.h>
#include <fty/process.h>
</%pre>
<%request scope="global">
UserInfo user;
</%request>
<%cpp>

    // check user permissions
    static const std::map <BiosProfile, std::string> PERMISSIONS = {
            {BiosProfile::Dashboard, "R"},
            {BiosProfile::Admin,     "RE"}
            };
    std::string audit_msg;
    if (request.getMethod () == "POST")
        audit_msg = std::string ("Request CREATE time FAILED");
    CHECK_USER_PERMISSIONS_OR_DIE_AUDIT (PERMISSIONS, audit_msg.empty () ? nullptr : audit_msg.c_str ());

    // BLOCK 1
    // input argument sanitization
    std::string checked_time;
    std::string checked_ntp;

    // non-trivial time can pass between start of processing
    // of this REST API call and actually setting the manual
    // time value - which *was* valid at the instant when
    // the user clicked the submission button in Web-GUI...
    time_t entry_time = time (NULL);

    if (!request.isMethodGET ()) {
        std::stringstream input (request.getBody (), std::ios_base::in);
        cxxtools::SerializationInfo si;
        cxxtools::JsonDeserializer deserializer (input);
        try {
            deserializer.deserialize (si);
        } catch (const std::exception& e) {
            std::string err =  TRANSLATE_ME ("Expecting valid json document: %s", JSONIFY (e.what ()).c_str ());
            http_die ("bad-request-document", err.c_str ());
        }

        std::string time;
        try {
            si.getMember ("time") >>= time;
        } catch (const std::exception& e) {
            time = "";
        }

        std::string ntp;
        try {
            si.getMember ("ntp") >>= ntp;
        } catch (const std::exception& e) {
            ntp = "";
        }

        if (time.empty () && ntp.empty ()) {
            std::string expected = TRANSLATE_ME ("time or ntp");
            http_die ("request-param-required", expected.c_str ());
        }

        static cxxtools::Regex t_rex ("^[1-9][0-9][0-9][0-9]-(0[1-9]|10|11|12)-([0-2][0-9]|30|31)T([0-1][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]Z$");
        if (!time.empty ()) {
            if (!t_rex.match (time)) {
                http_die ("request-param-bad", "time", time.c_str (), "format <YYYY>-<MM>-<DD>T<hh>:<mm>:<ss>Z (ISO 8601).");
            }
        }

        static cxxtools::Regex n_rex ("^[0-9a-z_.-]*$");
        if (!ntp.empty ()) {
            if (!n_rex.match (ntp)) {
                std::string expected = TRANSLATE_ME ("any combination of alphanumeric characters, underscore (_), dot (.) and hyphen (-).");
                http_die ("request-param-bad", "ntp", ntp.c_str (), expected.c_str ());
            }
        }

        if (!ntp.empty () && !time.empty ()) {
            log_warning ("Received both an 'ntp'='%s' and a 'time'='%s' argument, the effects may surprise you!", ntp.c_str (), time.c_str ());
        }

        checked_time = time;
        checked_ntp = ntp;
    }
    // input arguments sanitization end

    augtool* augeas = augtool::get_instance ();
    if (!augeas) {
        std::string err =  TRANSLATE_ME ("Cannot communicate with augtool. Is it installed or properly configured?");
        if (request.getMethod () == "POST")
            log_error_audit ("Request CREATE time %s %s FAILED", checked_time.c_str (), checked_ntp.c_str ());
        http_die ("internal-error", err.c_str ());
    }

    if (request.isMethodPOST ()) {

        if (!checked_time.empty ()) {
            if (auto ret = fty::Process::run("sudo", {"systemctl", "stop", "ntp"}); !ret || *ret ) {
                std::string err =  TRANSLATE_ME ("Cannot stop ntp service");
                log_error_audit ("Request CREATE time %s %s FAILED", checked_time.c_str (), checked_ntp.c_str ());
                http_die ("internal-error", err.c_str ());
            }

            if (auto ret = fty::Process::run("sudo", {"systemctl", "disable", "ntp"}); !ret || *ret) {
                std::string err =  TRANSLATE_ME ("Cannot disable ntp service");
                log_error_audit ("Request CREATE time %s %s FAILED", checked_time.c_str (), checked_ntp.c_str ());
                http_die ("internal-error", err.c_str ());
            }

            if (auto ret = fty::Process::run("sudo", {"systemctl", "mask", "ntp"}); !ret || *ret) {
                std::string err =  TRANSLATE_ME ("Cannot mask away ntp service");
                log_error_audit ("Request CREATE time %s %s FAILED", checked_time.c_str (), checked_ntp.c_str ());
                http_die ("internal-error", err.c_str ());
            }

            // Absorb the time it might take to sanity-check inputs
            // and manipulate services
            time_t setting_time = time (NULL);
            int64_t delta_time = int64_t(difftime (setting_time, entry_time));

            if ( delta_time > 0 ) {
                log_warning ("It took %" PRIi64 " seconds to get from start of call processing to setting the clock", delta_time);
                checked_time += " + ";
                checked_time += std::to_string (delta_time);
                checked_time += " sec";
            }

            // Run command with arguments.  Wait for complete and return the return value.
            if (auto ret = fty::Process::run("sudo", {"date", "-s", checked_time}); !ret || *ret) {
                std::string err =  TRANSLATE_ME ("Can't set requested OS time.");
                log_error_audit ("Request CREATE time %s %s FAILED", checked_time.c_str (), checked_ntp.c_str ());
                http_die ("internal-error", err.c_str ());
            }

            if (auto ret = fty::Process::run("sudo", {"hwclock", "--systohc"}); !ret || *ret) {
                std::string err =  TRANSLATE_ME ("Can't set requested HW time.");
                log_error_audit ("Request CREATE time %s %s FAILED", checked_time.c_str (), checked_ntp.c_str ());
                http_die ("internal-error", err.c_str ());
            }
        }

        if (!checked_ntp.empty ()) {

            augeas->run_cmd ("set /files/etc/ntp.conf/server[1] " + checked_ntp);
            augeas->save ();

            if (auto ret = fty::Process::run("sudo", {"systemctl", "unmask", "ntp"}); !ret || *ret) {
                log_debug ("Cannot unmask ntp service, maybe it was never masked away yet?");
            }

            if (auto ret = fty::Process::run("sudo", {"systemctl", "enable", "ntp"}); !ret || *ret) {
                std::string err =  TRANSLATE_ME ("Cannot enable ntp service");
                log_error_audit ("Request CREATE time %s %s FAILED", checked_time.c_str (), checked_ntp.c_str ());
                http_die ("internal-error", err.c_str ());
            }

            if (auto ret = fty::Process::run("sudo", {"systemctl", "restart", "ntp"}); !ret || *ret) {
                std::string err =  TRANSLATE_ME ("Cannot start ntp service");
                log_error_audit ("Request CREATE time %s %s FAILED", checked_time.c_str (), checked_ntp.c_str ());
                http_die ("internal-error", err.c_str ());
            }
        }
    }

    char buff[32];
    if (calendar_to_datetime (time (NULL), buff, 32) == -1) {
        std::string err =  TRANSLATE_ME ("calendar_to_datetime () failed.");
        if (request.getMethod () == "POST")
            log_error_audit ("Request CREATE time %s %s FAILED", checked_time.c_str (), checked_ntp.c_str ());
        http_die ("internal-error", err.c_str ());
    }
    std::string ntp_out = augeas->get_cmd_out ("get /files/etc/ntp.conf/server[1]");
    if (request.getMethod () == "POST")
        log_info_audit ("Request CREATE time %s %s SUCCESS", checked_time.c_str (), checked_ntp.c_str ());
</%cpp>
{
    <$$ utils::json::jsonify ("time", buff) $>,
    <$$ utils::json::jsonify ("ntp", ntp_out) $>
}
