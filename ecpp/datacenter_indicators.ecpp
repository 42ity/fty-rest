<#
 #
 # Copyright (C) 2015 - 2020 Eaton
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 2 of the License, or
 # (at your option) any later version.
 #
 # This program is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License along
 # with this program; if not, write to the Free Software Foundation, Inc.,
 # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 #
 #><#
/*!
 * \file datacenter_indicators.ecpp
 * \author Tomas Halman <TomasHalman@Eaton.com>
 * \author Alena Chernikava <AlenaChernikava@Eaton.com>
 * \author Karol Hrdina <KarolHrdina@Eaton.com>
 * \author Michal Vyskocil <MichalVyskocil@Eaton.com>
 * \brief  returns Current values of some metrics for datacenters
 */
 #><%pre>
#include <stdexcept>
#include <cxxtools/split.h>
#include <malamute.h>
#include <fty_proto.h>
#include <sys/types.h>
#include <unistd.h>

#include <math.h>
#include <fty_common_rest_helpers.h>
#include <fty_common_db_asset.h>
#include <fty_common_mlm_utils.h>

#include <fty_common_asset_types.h>
#include <fty_common_macros.h>
#include <fty_shm.h>

#include "shared/data.h"
#include "shared/utilspp.h"

#define RT_PROVIDER_PEER "fty-metric-cache"
#define RT_SUBJECT "latest-rt-data"



// ATTENTION!!! for trends:
//  first one should be average, second one is raw measurement
static const std::map<std::string, const std::string> PARAM_TO_SRC {
    {"power", "realpower.default"},
    {"avg_power_last_day", "realpower.default_arithmetic_mean_24h"},
    {"avg_power_last_week", "realpower.default_arithmetic_mean_7d"},
    {"avg_power_last_month", "realpower.default_arithmetic_mean_30d"},

    {"min_power_last_day", "realpower.default_min_24h"},
    {"min_power_last_week", "realpower.default_min_7d"},
    {"min_power_last_month", "realpower.default_min_30d"},

    {"max_power_last_day", "realpower.default_max_24h"},
    {"max_power_last_week", "realpower.default_max_7d"},
    {"max_power_last_month", "realpower.default_max_30d"},

    {"trend_power_last_day", "realpower.default_arithmetic_mean_24h/realpower.default"},
    {"trend_power_last_week", "realpower.default_arithmetic_mean_7d/realpower.default"},
    {"trend_power_last_month", "realpower.default_arithmetic_mean_30d/realpower.default"},

    {"consumption_last_day", "realpower.default_consumption_24h"},
    {"consumption_last_week", "realpower.default_consumption_7d"},
    {"consumption_last_month", "realpower.default_consumption_30d"},

    {"temperature", "average.temperature"},
    {"avg_temperature_last_day",  "average.temperature_arithmetic_mean_24h"},
    {"avg_temperature_last_week", "average.temperature_arithmetic_mean_7d"},
    {"avg_temperature_last_month", "average.temperature_arithmetic_mean_30d"},

    {"min_temperature_last_day",  "average.temperature_min_24h"},
    {"min_temperature_last_week", "average.temperature_min_7d"},
    {"min_temperature_last_month", "average.temperature_min_30d"},

    {"max_temperature_last_day",  "average.temperature_max_24h"},
    {"max_temperature_last_week", "average.temperature_max_7d"},
    {"max_temperature_last_month", "average.temperature_max_30d"},

    {"trend_temperature_last_day",  "average.temperature_arithmetic_mean_24h/average.temperature"},
    {"trend_temperature_last_week", "average.temperature_arithmetic_mean_7d/average.temperature"},
    {"trend_temperature_last_month", "average.temperature_arithmetic_mean_30d/average.temperature"},

    {"humidity", "average.humidity"},
    {"avg_humidity_last_day", "average.humidity_arithmetic_mean_24h"},
    {"avg_humidity_last_week", "average.humidity_arithmetic_mean_7d"},
    {"avg_humidity_last_month", "average.humidity_arithmetic_mean_30d"},

    {"min_humidity_last_day", "average.humidity_min_24h"},
    {"min_humidity_last_week", "average.humidity_min_7d"},
    {"min_humidity_last_month", "average.humidity_min_30d"},

    {"max_humidity_last_day", "average.humidity_max_24h"},
    {"max_humidity_last_week", "average.humidity_max_7d"},
    {"max_humidity_last_month", "average.humidity_max_30d"},

    {"trend_humidity_last_day", "average.humidity_arithmetic_mean_24h/average.humidity"},
    {"trend_humidity_last_week", "average.humidity_arithmetic_mean_7d/average.humidity"},
    {"trend_humidity_last_month", "average.humidity_arithmetic_mean_30d/average.humidity"},
};



const std::set<std::string> interesting_sources{
"realpower.default",
"realpower.default_arithmetic_mean_24h",
"realpower.default_arithmetic_mean_7d",
"realpower.default_arithmetic_mean_30d",
"realpower.default_min_24h",
"realpower.default_min_7d",
"realpower.default_min_30d",
"realpower.default_max_24h",
"realpower.default_max_7d",
"realpower.default_max_30d",
"realpower.default_arithmetic_mean_24h",
"realpower.default_arithmetic_mean_7d",
"realpower.default_arithmetic_mean_30d",
"realpower.default_consumption_24h",
"realpower.default_consumption_7d",
"realpower.default_consumption_30d",
"average.temperature",
"average.temperature_arithmetic_mean_24h",
"average.temperature_arithmetic_mean_7d",
"average.temperature_arithmetic_mean_30d",
"average.temperature_min_24h",
"average.temperature_min_7d",
"average.temperature_min_30d",
"average.temperature_max_24h",
"average.temperature_max_7d",
"average.temperature_max_30d",
"average.temperature_arithmetic_mean_24h",
"average.temperature_arithmetic_mean_7d",
"average.temperature_arithmetic_mean_30d",
"average.humidity_arithmetic_mean_24h",
"average.humidity_arithmetic_mean_7d",
"average.humidity_arithmetic_mean_30d",
"average.humidity",
"average.humidity_min_24h",
"average.humidity_min_7d",
"average.humidity_min_30d",
"average.humidity_max_24h",
"average.humidity_max_7d",
"average.humidity_max_30d",
"average.humidity_arithmetic_mean_24h",
"average.humidity_arithmetic_mean_7d",
"average.humidity_arithmetic_mean_30d"};


static double
    get_trend_value (
        const std::map<std::string, std::string> &dataDc,
        const std::string &source
    )
{
    std::vector<std::string> items;
    cxxtools::split('/', PARAM_TO_SRC.at(source), std::back_inserter(items));
    if( items.size() != 2 ) {
        return 0.0f;
    }

    double value_actual = NAN;
    auto it = dataDc.find(items.at(1));
    if ( it != dataDc.cend() ) {
        value_actual = std::stod (it->second);
    }

    double value_average = NAN;
    it = dataDc.find(items.at(0));
    if ( it != dataDc.cend() ) {
        value_average = std::stod (it->second);
    }

    double val = NAN;
    if ( value_average != 0 ) {
        val = round( (value_actual - value_average ) / ( value_average ) * 1000.0 ) / 10.0 ;
    }
    return val;
}

static bool
s_is_valid_param(const std::string& p)
{
    return PARAM_TO_SRC.count(p) != 0;
}

static std::string
s_get_valid_param (void)
{
    return utils::join_keys_map (PARAM_TO_SRC, ", ");
}

static bool
    isTrend (const std::string &key)
{
    return ( key.substr(0,5) == "trend" );
}

</%pre>
<%thread scope="global">
asset_manager asset_mgr;
</%thread>
<%request scope="global">
UserInfo user;
bool database_ready;
</%request>
<%cpp>
{
    // verify server is ready
    if (!database_ready) {
        log_debug ("Database is not ready yet.");
        std::string err =  TRANSLATE_ME ("Database is not ready yet, please try again after a while.");
        http_die ("internal-error", err.c_str ());
    }

    // Input arguments checks
    // arg1, arg2 are both mandatory
    std::string checked_arg1;
    std::string checked_arg2;

    // check user permissions
    static const std::map <BiosProfile, std::string> PERMISSIONS = {
            {BiosProfile::Dashboard, "R"},
            {BiosProfile::Admin,     "R"}
            };
    CHECK_USER_PERMISSIONS_OR_DIE (PERMISSIONS);

    {
        // sanitize params
        std::string arg1 = qparam.param ("arg1");
        std::string arg2 = qparam.param ("arg2");

        if (arg1.empty () || !persist::is_ok_name (arg1.c_str ())) {
            http_die ("request-param-required", "arg1");
        }

        if (arg2.empty ()) {
            http_die ("request-param-required", "arg2");
        }

        checked_arg1 = arg1;
        check_regex_text_or_die ("arg2", arg2, checked_arg2, "^[_,a-z]{1,1024}$");
        // sanitize params end
    }

    // arg2 is a single value OR a comma-separated list formed from a list of permissible values (PARAM_TO_SRC)
    std::vector<std::string> requestedParams;
    cxxtools::split(",", checked_arg2, std::back_inserter(requestedParams));

    for (const std::string& param: requestedParams) {
        if (!s_is_valid_param (param) ) {
            http_die ("request-param-bad", "arg2",
                      std::string ("value '").append (param).append ("'").c_str (),
                      std::string ("one of the following values: [").append (s_get_valid_param ()).append ("].").c_str ());
        }
    }

    // arg1 is a single value OR a comma-separated list of element identifiers
    std::vector<std::string> DCs;
    cxxtools::split(",", checked_arg1, std::back_inserter(DCs));

    // check that DC exists
    auto allDcsShort = asset_mgr.get_items1("datacenter", "");
    if (allDcsShort.status == 0) {
        std::string err =  TRANSLATE_ME ("Error while retrieving information about datacenters.");
        http_die ("internal-error", err.c_str ());
    }
    std::vector<std::string> DCNames;
    std::vector<uint32_t> DCIDs;
    for (auto const& item : DCs) {
        int64_t dbid = DBAssets::name_to_asset_id (item);
        if (dbid == -1) {
            http_die ("element-not-found", item.c_str ());
        }
        if (dbid == -2) {
            std::string err =  TRANSLATE_ME ("Connecting to database failed.");
            http_die ("internal-error", err.c_str ());
        }
        auto it = allDcsShort.item.find (uint32_t(dbid));
        if (it == allDcsShort.item.end()) {
            http_die ("element-not-found", item.c_str ());
        }
        DCIDs.push_back(uint32_t(dbid));
        DCNames.push_back (it->second);
    }

    std::map<std::string, std::map<std::string, std::string>> dataDc{};

    // get current data for all DCs
    for ( const auto &aDc : DCNames ) {
        // fill the request message according the protocol
        { //make sure we delete shmMetrics as soon as possible
          fty::shm::shmMetrics metric_reply;
          if(fty::shm::read_metrics(aDc, ".*", metric_reply) != 0) {
              std::string err =  TRANSLATE_ME ("See log for more detail");
              http_die ("internal-error", err.c_str ());
          }
          if(metric_reply.size() == 0 )
            continue;
          dataDc.emplace (aDc, std::map<std::string,std::string>());
          for(auto &metric : metric_reply) {
              if ( interesting_sources.count ( fty_proto_type (metric)) != 0 ) {
                  dataDc.at(aDc).emplace (fty_proto_type (metric), fty_proto_value (metric) );
              }
          }
        }

        for( size_t P = 0; P < requestedParams.size(); P++ ) {
            const std::string& key = requestedParams[P];
            // key:value
            if ( dataDc.at(aDc).count(PARAM_TO_SRC.at(key)) == 0 ) {
                if ( isTrend (key) ) {
                    double value = get_trend_value(dataDc.at(aDc), key);
                    dataDc.at(aDc).emplace (key, std::isnan (value)? "null" : std::to_string (value));
                } else {
                    dataDc.at(aDc).emplace (key, "null");
                }
            }
            else {
                dataDc.at(aDc).emplace(key, dataDc.at(aDc).at(PARAM_TO_SRC.at(key)));
            }
        }
    }

    // So we finally have all values in "dataDc"
    // lets just  print them
    std::string json;
    json += "{\"datacenter_indicators\": [";
    for( size_t D = 0 ; D < DCs.size(); D++ ) {
        std::pair<std::string,std::string> dc_names = DBAssets::id_to_name_ext_name (DCIDs[D]);
        if (dc_names.first.empty () && dc_names.second.empty ()) {
            std::string err =  TRANSLATE_ME ("Database failure");
            http_die ("internal-error", err.c_str ());
        }

        json += "{";
        json += "\"id\": \"";
        json += DCNames[D];
        json += "\",";
        json += "\"name\": \"";
        json += dc_names.second;
        json += "\",";
        for ( const auto &row : dataDc.at(DCNames[D]) ) {
            // data contains topics and it aliases, but we need to print only aliases
            if ( PARAM_TO_SRC.count(row.first) == 1 ) {
                // ACE: "nan" should never appear, but system doesn't agree with us
                // If double value is "nan" -> then actually we do not have value
                // JSON do not accept "nan", but "null"
                std::string data1 = row.second;
                std::transform(data1.begin(), data1.end(), data1.begin(), ::tolower); // who know if it would be NaN or nan or ...
                json += "\"" + row.first + "\":" + ( data1 == "nan" ? "null" : row.second );
                json += ",";
            }
        }
        json.back() = ' ' ;
        json += "}"; // DC object is finished
        json += ( D < DCs.size() -1) ? "," : "";
    }
    json += "]}"; // close the main object

    reply.out() << json;
}
</%cpp>
